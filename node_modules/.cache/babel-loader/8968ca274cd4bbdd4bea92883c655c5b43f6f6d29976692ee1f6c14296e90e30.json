{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Configuration Constants\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\n  WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\n  CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\n};\n\n// Storage Keys\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_ID: 'sessionId',\n  SESSION_START: 'sessionStart',\n  SESSION_WARNING_SHOWN: 'sessionWarningShown',\n  REMEMBER_ME: 'rememberMe'\n};\n\n// Utility Functions\nconst getCurrentUTCDateTime = () => {\n  const now = new Date();\n  return now.toISOString().slice(0, 19).replace('T', ' ');\n};\nconst getSystemInfo = () => ({\n  userAgent: navigator.userAgent,\n  platform: navigator.platform,\n  language: navigator.language,\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  screenResolution: `${window.screen.width}x${window.screen.height}`,\n  timestamp: getCurrentUTCDateTime()\n});\nconst clearStorage = () => {\n  const preservedKeys = [STORAGE_KEYS.REMEMBER_ME];\n  Object.keys(localStorage).forEach(key => {\n    if (!preservedKeys.includes(key)) {\n      try {\n        localStorage.removeItem(key);\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        console.error(`Error clearing storage key ${key}:`, error);\n      }\n    }\n  });\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const currentDateTime = getCurrentUTCDateTime();\n  const storedUser = {\n    ...userData,\n    lastActive: currentDateTime,\n    lastUpdated: currentDateTime,\n    systemInfo: getSystemInfo()\n  };\n  try {\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    throw new Error('Failed to update user data');\n  }\n};\nconst checkSessionExpiry = () => {\n  const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n  if (!lastActive) return true;\n  const currentTime = new Date().getTime();\n  const lastActiveTime = new Date(lastActive).getTime();\n  const timeDifference = currentTime - lastActiveTime;\n  if (timeDifference > API_CONFIG.WARNING_TIME && !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\n    toast.warning('Your session will expire soon. Please save your work.');\n    localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\n  }\n  return timeDifference > API_CONFIG.SESSION_TIMEOUT;\n};\n\n// API Instance\nconst Api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  const currentDateTime = getCurrentUTCDateTime();\n  if (checkSessionExpiry()) {\n    clearStorage();\n    window.location.href = '/login?session=expired';\n    return Promise.reject('Session expired');\n  }\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.metadata = {\n    startTime: new Date(),\n    requestId: Math.random().toString(36).substring(7),\n    timestamp: currentDateTime,\n    systemInfo: getSystemInfo()\n  };\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const currentDateTime = getCurrentUTCDateTime();\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return {\n    ...response,\n    timestamp: currentDateTime,\n    duration: new Date() - response.config.metadata.startTime\n  };\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage();\n    window.location.href = '/login?session=expired';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response3, _error$response4;\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n  const currentDateTime = getCurrentUTCDateTime();\n  console.error('API Error:', {\n    message: errorMessage,\n    timestamp: currentDateTime,\n    error: error\n  });\n  toast.error(errorMessage);\n  return {\n    message: errorMessage,\n    timestamp: currentDateTime,\n    status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n    data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data\n  };\n};\n\n// API Functions\nexport const isLoggedIn = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n    if (!token || !userId) return false;\n    if (lastActive) {\n      const lastActiveTime = new Date(lastActive).getTime();\n      const currentTime = new Date().getTime();\n      if (currentTime - lastActiveTime > API_CONFIG.SESSION_TIMEOUT) {\n        clearStorage();\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Auth check error:', error);\n    return false;\n  }\n};\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error getting user data:', error);\n    return null;\n  }\n};\nexport const loginApi = async data => {\n  try {\n    var _response$data;\n    clearStorage();\n    const currentDateTime = getCurrentUTCDateTime();\n    const loginData = {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    };\n    const response = await Api.post('/users/login', loginData);\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.data) {\n      const {\n        user,\n        token\n      } = response.data.data;\n      const sessionId = Math.random().toString(36).substring(7);\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\n      localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\n      localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\n      localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n      updateStoredUserData({\n        ...user,\n        sessionId,\n        lastLogin: currentDateTime\n      });\n      console.log('Login successful:', {\n        userId: user._id,\n        nickname: user.nickname,\n        sessionId,\n        timestamp: currentDateTime\n      });\n      toast.success(`Welcome back, ${user.nickname}!`);\n    }\n    return response;\n  } catch (error) {\n    clearStorage();\n    throw handleApiError(error);\n  }\n};\n\n// ... (previous code remains the same)\n\nexport const signupApi = async data => {\n  try {\n    const currentDateTime = getCurrentUTCDateTime();\n    const response = await Api.post('/users/signup', {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    });\n    toast.success('Registration successful! Please log in.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const createConfession = async confessionData => {\n  try {\n    var _response$data2;\n    const formData = new FormData();\n    const currentDateTime = getCurrentUTCDateTime();\n    const currentData = {\n      ...confessionData,\n      timestamp: currentDateTime,\n      createdBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.post('users/confessions/create', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.success) {\n      toast.success('Confession created successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateConfession = async (id, confessionData) => {\n  try {\n    var _response$data3;\n    const formData = new FormData();\n    const currentDateTime = getCurrentUTCDateTime();\n    const currentData = {\n      ...confessionData,\n      updatedAt: currentDateTime,\n      lastModifiedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.put(`users/confessions/${id}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success) {\n      toast.success('Confession updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const deleteConfession = async id => {\n  try {\n    var _response$data4;\n    const response = await Api.delete(`users/confessions/${id}`, {\n      data: {\n        timestamp: getCurrentUTCDateTime(),\n        deletedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\n      }\n    });\n    if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) {\n      toast.success('Confession deleted successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserConfessions = async () => {\n  try {\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    return await Api.get(`users/confessions/my?timestamp=${getCurrentUTCDateTime()}&userId=${userId}`);\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    var _response$data5;\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) throw new Error('User ID not found');\n    const response = await Api.get(`/users/profile/${userId}?timestamp=${getCurrentUTCDateTime()}`);\n    if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.data) {\n      updateStoredUserData(response.data.data);\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    var _response$data6;\n    const currentDateTime = getCurrentUTCDateTime();\n    const response = await Api.put('/users/profile/update', {\n      ...userData,\n      timestamp: currentDateTime,\n      lastModified: currentDateTime\n    });\n    if ((_response$data6 = response.data) !== null && _response$data6 !== void 0 && _response$data6.success) {\n      updateStoredUserData(response.data.user);\n      toast.success('Profile updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const changePassword = async passwordData => {\n  try {\n    var _response$data7;\n    const response = await Api.put('/users/change-password', {\n      ...passwordData,\n      timestamp: getCurrentUTCDateTime(),\n      userId: localStorage.getItem(STORAGE_KEYS.USER_ID)\n    });\n    if ((_response$data7 = response.data) !== null && _response$data7 !== void 0 && _response$data7.success) {\n      toast.success('Password changed successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const forgotPasswordApi = async email => {\n  try {\n    const response = await Api.post('/users/forgot-password', {\n      email,\n      timestamp: getCurrentUTCDateTime()\n    });\n    toast.success('Password reset link sent to your email!');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const resetPasswordApi = async (token, newPassword) => {\n  try {\n    const response = await Api.post(`/users/reset-password/${token}`, {\n      newPassword,\n      timestamp: getCurrentUTCDateTime()\n    });\n    toast.success('Password reset successful! Please login with your new password.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const submitContactUs = async contactData => {\n  try {\n    var _response$data8;\n    const response = await Api.post('/users/contactUs', {\n      ...contactData,\n      timestamp: getCurrentUTCDateTime(),\n      userId: localStorage.getItem(STORAGE_KEYS.USER_ID) || null\n    });\n    if ((_response$data8 = response.data) !== null && _response$data8 !== void 0 && _response$data8.success) {\n      toast.success('Message sent successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n// Initialize session checker\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    if (isLoggedIn()) {\n      const currentTime = getCurrentUTCDateTime();\n      if (checkSessionExpiry()) {\n        console.log('Session expired at:', currentTime);\n        clearStorage();\n        window.location.href = '/login?session=expired';\n      }\n    }\n  }, API_CONFIG.CHECK_INTERVAL);\n}\nexport default Api;","map":{"version":3,"names":["axios","toast","API_CONFIG","BASE_URL","process","env","REACT_APP_API_BASE_URL","TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","SESSION_TIMEOUT","REACT_APP_SESSION_TIMEOUT","WARNING_TIME","REACT_APP_WARNING_TIME","CHECK_INTERVAL","REACT_APP_CHECK_INTERVAL","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","SESSION_ID","SESSION_START","SESSION_WARNING_SHOWN","REMEMBER_ME","getCurrentUTCDateTime","now","Date","toISOString","slice","replace","getSystemInfo","userAgent","navigator","platform","language","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","screenResolution","window","screen","width","height","timestamp","clearStorage","preservedKeys","Object","keys","localStorage","forEach","key","includes","removeItem","sessionStorage","error","console","updateStoredUserData","userData","currentDateTime","storedUser","lastActive","lastUpdated","systemInfo","setItem","JSON","stringify","Error","checkSessionExpiry","getItem","currentTime","getTime","lastActiveTime","timeDifference","warning","Api","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","location","href","Promise","reject","Authorization","metadata","startTime","requestId","Math","random","toString","substring","handleApiError","response","duration","_error$response","status","_error$response2","_error$response2$data","_error$response3","_error$response4","errorMessage","data","message","isLoggedIn","userId","getStoredUserData","parse","loginApi","_response$data","loginData","post","user","sessionId","_id","lastLogin","log","nickname","success","signupApi","createConfession","confessionData","_response$data2","formData","FormData","currentData","createdBy","append","image","updateConfession","id","_response$data3","updatedAt","lastModifiedBy","put","deleteConfession","_response$data4","delete","deletedBy","getUserConfessions","get","getUserProfile","_response$data5","updateUserProfile","_response$data6","lastModified","changePassword","passwordData","_response$data7","forgotPasswordApi","email","resetPasswordApi","newPassword","submitContactUs","contactData","_response$data8","setInterval"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Configuration Constants\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\r\n    SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\r\n    WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\r\n    CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\r\n};\r\n\r\n// Storage Keys\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_ID: 'sessionId',\r\n    SESSION_START: 'sessionStart',\r\n    SESSION_WARNING_SHOWN: 'sessionWarningShown',\r\n    REMEMBER_ME: 'rememberMe'\r\n};\r\n\r\n// Utility Functions\r\nconst getCurrentUTCDateTime = () => {\r\n    const now = new Date();\r\n    return now.toISOString().slice(0, 19).replace('T', ' ');\r\n};\r\n\r\nconst getSystemInfo = () => ({\r\n    userAgent: navigator.userAgent,\r\n    platform: navigator.platform,\r\n    language: navigator.language,\r\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n    screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n    timestamp: getCurrentUTCDateTime()\r\n});\r\n\r\nconst clearStorage = () => {\r\n    const preservedKeys = [STORAGE_KEYS.REMEMBER_ME];\r\n    Object.keys(localStorage).forEach(key => {\r\n        if (!preservedKeys.includes(key)) {\r\n            try {\r\n                localStorage.removeItem(key);\r\n                sessionStorage.removeItem(key);\r\n            } catch (error) {\r\n                console.error(`Error clearing storage key ${key}:`, error);\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    const storedUser = {\r\n        ...userData,\r\n        lastActive: currentDateTime,\r\n        lastUpdated: currentDateTime,\r\n        systemInfo: getSystemInfo()\r\n    };\r\n\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n    } catch (error) {\r\n        console.error('Error updating user data:', error);\r\n        throw new Error('Failed to update user data');\r\n    }\r\n};\r\n\r\nconst checkSessionExpiry = () => {\r\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n    if (!lastActive) return true;\r\n\r\n    const currentTime = new Date().getTime();\r\n    const lastActiveTime = new Date(lastActive).getTime();\r\n    const timeDifference = currentTime - lastActiveTime;\r\n\r\n    if (timeDifference > API_CONFIG.WARNING_TIME && \r\n        !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\r\n        toast.warning('Your session will expire soon. Please save your work.');\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\r\n    }\r\n\r\n    return timeDifference > API_CONFIG.SESSION_TIMEOUT;\r\n};\r\n\r\n// API Instance\r\nconst Api = axios.create({\r\n    baseURL: API_CONFIG.BASE_URL,\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        if (checkSessionExpiry()) {\r\n            clearStorage();\r\n            window.location.href = '/login?session=expired';\r\n            return Promise.reject('Session expired');\r\n        }\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        config.metadata = {\r\n            startTime: new Date(),\r\n            requestId: Math.random().toString(36).substring(7),\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        \r\n        return {\r\n            ...response,\r\n            timestamp: currentDateTime,\r\n            duration: new Date() - response.config.metadata.startTime\r\n        };\r\n    },\r\n    (error) => {\r\n        if (error.response?.status === 401) {\r\n            clearStorage();\r\n            window.location.href = '/login?session=expired';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    \r\n    console.error('API Error:', {\r\n        message: errorMessage,\r\n        timestamp: currentDateTime,\r\n        error: error\r\n    });\r\n\r\n    toast.error(errorMessage);\r\n    return {\r\n        message: errorMessage,\r\n        timestamp: currentDateTime,\r\n        status: error.response?.status,\r\n        data: error.response?.data\r\n    };\r\n};\r\n\r\n// API Functions\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n\r\n        if (!token || !userId) return false;\r\n\r\n        if (lastActive) {\r\n            const lastActiveTime = new Date(lastActive).getTime();\r\n            const currentTime = new Date().getTime();\r\n            if (currentTime - lastActiveTime > API_CONFIG.SESSION_TIMEOUT) {\r\n                clearStorage();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Auth check error:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error getting user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        clearStorage();\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const loginData = {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        const response = await Api.post('/users/login', loginData);\r\n\r\n        if (response.data?.data) {\r\n            const { user, token } = response.data.data;\r\n            const sessionId = Math.random().toString(36).substring(7);\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\r\n            localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n            \r\n            updateStoredUserData({\r\n                ...user,\r\n                sessionId,\r\n                lastLogin: currentDateTime\r\n            });\r\n\r\n            console.log('Login successful:', {\r\n                userId: user._id,\r\n                nickname: user.nickname,\r\n                sessionId,\r\n                timestamp: currentDateTime\r\n            });\r\n\r\n            toast.success(`Welcome back, ${user.nickname}!`);\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        clearStorage();\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// ... (previous code remains the same)\r\n\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        const response = await Api.post('/users/signup', {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        });\r\n        toast.success('Registration successful! Please log in.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const createConfession = async (confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            timestamp: currentDateTime,\r\n            createdBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.post('users/confessions/create', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession created successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateConfession = async (id, confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            updatedAt: currentDateTime,\r\n            lastModifiedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.put(`users/confessions/${id}`, formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession updated successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const deleteConfession = async (id) => {\r\n    try {\r\n        const response = await Api.delete(`users/confessions/${id}`, {\r\n            data: {\r\n                timestamp: getCurrentUTCDateTime(),\r\n                deletedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n            }\r\n        });\r\n        if (response.data?.success) {\r\n            toast.success('Confession deleted successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserConfessions = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        return await Api.get(`users/confessions/my?timestamp=${getCurrentUTCDateTime()}&userId=${userId}`);\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        if (!userId) throw new Error('User ID not found');\r\n\r\n        const response = await Api.get(`/users/profile/${userId}?timestamp=${getCurrentUTCDateTime()}`);\r\n        if (response.data?.data) {\r\n            updateStoredUserData(response.data.data);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateUserProfile = async (userData) => {\r\n    try {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        const response = await Api.put('/users/profile/update', {\r\n            ...userData,\r\n            timestamp: currentDateTime,\r\n            lastModified: currentDateTime\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            updateStoredUserData(response.data.user);\r\n            toast.success('Profile updated successfully!');\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const changePassword = async (passwordData) => {\r\n    try {\r\n        const response = await Api.put('/users/change-password', {\r\n            ...passwordData,\r\n            timestamp: getCurrentUTCDateTime(),\r\n            userId: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            toast.success('Password changed successfully!');\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const forgotPasswordApi = async (email) => {\r\n    try {\r\n        const response = await Api.post('/users/forgot-password', {\r\n            email,\r\n            timestamp: getCurrentUTCDateTime()\r\n        });\r\n        toast.success('Password reset link sent to your email!');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const resetPasswordApi = async (token, newPassword) => {\r\n    try {\r\n        const response = await Api.post(`/users/reset-password/${token}`, {\r\n            newPassword,\r\n            timestamp: getCurrentUTCDateTime()\r\n        });\r\n        toast.success('Password reset successful! Please login with your new password.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const submitContactUs = async (contactData) => {\r\n    try {\r\n        const response = await Api.post('/users/contactUs', {\r\n            ...contactData,\r\n            timestamp: getCurrentUTCDateTime(),\r\n            userId: localStorage.getItem(STORAGE_KEYS.USER_ID) || null\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            toast.success('Message sent successfully!');\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Initialize session checker\r\nif (typeof window !== 'undefined') {\r\n    setInterval(() => {\r\n        if (isLoggedIn()) {\r\n            const currentTime = getCurrentUTCDateTime();\r\n            if (checkSessionExpiry()) {\r\n                console.log('Session expired at:', currentTime);\r\n                clearStorage();\r\n                window.location.href = '/login?session=expired';\r\n            }\r\n        }\r\n    }, API_CONFIG.CHECK_INTERVAL);\r\n}\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}