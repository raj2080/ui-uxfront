{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Configuration Constants\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 3600000,\n  // 1 hour\n  WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 3300000 // 55 minutes\n};\n\n// Storage Keys\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  SESSION_ID: 'sessionId',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_START: 'sessionStart'\n};\n\n// Utility Functions\nconst getCurrentUTCDateTime = () => {\n  const now = new Date();\n  return now.toISOString().replace('T', ' ').replace(/\\.\\d+Z$/, '');\n};\nconst getSystemInfo = () => ({\n  userAgent: navigator.userAgent,\n  platform: navigator.platform,\n  language: navigator.language,\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  screenResolution: `${window.screen.width}x${window.screen.height}`,\n  timestamp: getCurrentUTCDateTime()\n});\nconst clearStorage = (preserveEmail = false) => {\n  const rememberedEmail = preserveEmail ? localStorage.getItem('rememberedEmail') : null;\n  Object.values(STORAGE_KEYS).forEach(key => {\n    localStorage.removeItem(key);\n    sessionStorage.removeItem(key);\n  });\n  if (preserveEmail && rememberedEmail) {\n    localStorage.setItem('rememberedEmail', rememberedEmail);\n  }\n};\n\n// API Instance\nconst Api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  const currentDateTime = getCurrentUTCDateTime();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.metadata = {\n    startTime: new Date(),\n    timestamp: currentDateTime\n  };\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return config;\n}, error => Promise.reject(error));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const currentDateTime = getCurrentUTCDateTime();\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage(true);\n    window.location.href = '/login?session=expired';\n  }\n  return Promise.reject(error);\n});\n\n// Login Function\nexport const loginApi = async loginData => {\n  try {\n    var _response$data, _response$data2;\n    clearStorage(true); // Clear storage but preserve remembered email\n    const currentDateTime = getCurrentUTCDateTime();\n    const response = await Api.post('/users/login', {\n      ...loginData,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    });\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.data) {\n      const {\n        user,\n        token,\n        sessionId\n      } = response.data.data;\n\n      // Store session data\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\n      localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\n      localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\n      localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n      localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify({\n        ...user,\n        lastLogin: currentDateTime,\n        sessionId: sessionId\n      }));\n      console.log('Login successful:', {\n        userId: user._id,\n        nickname: user.nickname || 'raj2080',\n        sessionId,\n        timestamp: currentDateTime\n      });\n    }\n    return response;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Check if user is logged in\nexport const isLoggedIn = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n    if (!token || !userId) return false;\n    if (lastActive) {\n      const lastActiveTime = new Date(lastActive).getTime();\n      const currentTime = new Date().getTime();\n      if (currentTime - lastActiveTime > API_CONFIG.SESSION_TIMEOUT) {\n        clearStorage(true);\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Auth check error:', error);\n    return false;\n  }\n};\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error getting user data:', error);\n    return null;\n  }\n};\nexport default Api;","map":{"version":3,"names":["axios","toast","API_CONFIG","BASE_URL","process","env","REACT_APP_API_BASE_URL","TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","SESSION_TIMEOUT","REACT_APP_SESSION_TIMEOUT","WARNING_TIME","REACT_APP_WARNING_TIME","STORAGE_KEYS","TOKEN","USER_ID","USER","SESSION_ID","LAST_ACTIVE","SESSION_START","getCurrentUTCDateTime","now","Date","toISOString","replace","getSystemInfo","userAgent","navigator","platform","language","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","screenResolution","window","screen","width","height","timestamp","clearStorage","preserveEmail","rememberedEmail","localStorage","getItem","Object","values","forEach","key","removeItem","sessionStorage","setItem","Api","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","currentDateTime","Authorization","metadata","startTime","error","Promise","reject","response","_error$response","status","location","href","loginApi","loginData","_response$data","_response$data2","post","systemInfo","data","success","user","sessionId","_id","JSON","stringify","lastLogin","console","log","userId","nickname","isLoggedIn","lastActive","lastActiveTime","getTime","currentTime","getStoredUserData","userData","parse"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Configuration Constants\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\r\n    SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 3600000, // 1 hour\r\n    WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 3300000, // 55 minutes\r\n};\r\n\r\n// Storage Keys\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    SESSION_ID: 'sessionId',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_START: 'sessionStart'\r\n};\r\n\r\n// Utility Functions\r\nconst getCurrentUTCDateTime = () => {\r\n    const now = new Date();\r\n    return now.toISOString()\r\n        .replace('T', ' ')\r\n        .replace(/\\.\\d+Z$/, '');\r\n};\r\n\r\nconst getSystemInfo = () => ({\r\n    userAgent: navigator.userAgent,\r\n    platform: navigator.platform,\r\n    language: navigator.language,\r\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n    screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n    timestamp: getCurrentUTCDateTime()\r\n});\r\n\r\nconst clearStorage = (preserveEmail = false) => {\r\n    const rememberedEmail = preserveEmail ? localStorage.getItem('rememberedEmail') : null;\r\n    \r\n    Object.values(STORAGE_KEYS).forEach(key => {\r\n        localStorage.removeItem(key);\r\n        sessionStorage.removeItem(key);\r\n    });\r\n\r\n    if (preserveEmail && rememberedEmail) {\r\n        localStorage.setItem('rememberedEmail', rememberedEmail);\r\n    }\r\n};\r\n\r\n// API Instance\r\nconst Api = axios.create({\r\n    baseURL: API_CONFIG.BASE_URL,\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        config.metadata = {\r\n            startTime: new Date(),\r\n            timestamp: currentDateTime\r\n        };\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        if (error.response?.status === 401) {\r\n            clearStorage(true);\r\n            window.location.href = '/login?session=expired';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Login Function\r\nexport const loginApi = async (loginData) => {\r\n    try {\r\n        clearStorage(true); // Clear storage but preserve remembered email\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n\r\n        const response = await Api.post('/users/login', {\r\n            ...loginData,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        });\r\n\r\n        if (response.data?.success && response.data?.data) {\r\n            const { user, token, sessionId } = response.data.data;\r\n\r\n            // Store session data\r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\r\n            localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n            localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify({\r\n                ...user,\r\n                lastLogin: currentDateTime,\r\n                sessionId: sessionId\r\n            }));\r\n\r\n            console.log('Login successful:', {\r\n                userId: user._id,\r\n                nickname: user.nickname || 'raj2080',\r\n                sessionId,\r\n                timestamp: currentDateTime\r\n            });\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Login error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Check if user is logged in\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n\r\n        if (!token || !userId) return false;\r\n\r\n        if (lastActive) {\r\n            const lastActiveTime = new Date(lastActive).getTime();\r\n            const currentTime = new Date().getTime();\r\n            if (currentTime - lastActiveTime > API_CONFIG.SESSION_TIMEOUT) {\r\n                clearStorage(true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Auth check error:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error getting user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}