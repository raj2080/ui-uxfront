{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Configuration Constants\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\n  WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\n  CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\n};\n\n// Storage Keys\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_ID: 'sessionId',\n  SESSION_START: 'sessionStart',\n  SESSION_WARNING_SHOWN: 'sessionWarningShown',\n  REMEMBER_ME: 'rememberMe',\n  REMEMBERED_EMAIL: 'rememberedEmail',\n  LOGIN_IN_PROGRESS: 'loginInProgress'\n};\n\n// Utility Functions\nconst getCurrentUTCDateTime = () => {\n  const now = new Date();\n  const year = now.getUTCFullYear();\n  const month = String(now.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(now.getUTCDate()).padStart(2, '0');\n  const hours = String(now.getUTCHours()).padStart(2, '0');\n  const minutes = String(now.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(now.getUTCSeconds()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n};\nconst getSystemInfo = () => {\n  const userData = getStoredUserData();\n  return {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    language: navigator.language,\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    screenResolution: `${window.screen.width}x${window.screen.height}`,\n    timestamp: getCurrentUTCDateTime(),\n    currentUser: (userData === null || userData === void 0 ? void 0 : userData.nickname) || null\n  };\n};\nconst clearStorage = (preserveEmail = false) => {\n  if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\n    return;\n  }\n  const rememberedEmail = preserveEmail ? localStorage.getItem(STORAGE_KEYS.REMEMBERED_EMAIL) : null;\n  Object.keys(localStorage).forEach(key => {\n    if (key !== STORAGE_KEYS.REMEMBERED_EMAIL || !preserveEmail) {\n      try {\n        localStorage.removeItem(key);\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        console.error(`Error clearing storage key ${key}:`, error);\n      }\n    }\n  });\n  if (preserveEmail && rememberedEmail) {\n    localStorage.setItem(STORAGE_KEYS.REMEMBERED_EMAIL, rememberedEmail);\n  }\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const currentDateTime = getCurrentUTCDateTime();\n  const storedUser = {\n    ...userData,\n    lastActive: currentDateTime,\n    lastUpdated: currentDateTime,\n    systemInfo: getSystemInfo()\n  };\n  try {\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    throw new Error('Failed to update user data');\n  }\n};\nconst checkSessionExpiry = () => {\n  if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\n    return false;\n  }\n  const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n  if (!lastActive) return true;\n  const currentTime = new Date().getTime();\n  const lastActiveTime = new Date(lastActive).getTime();\n  const timeDifference = currentTime - lastActiveTime;\n  if (timeDifference > API_CONFIG.WARNING_TIME && !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\n    toast.warning('Your session will expire soon. Please save your work.', {\n      toastId: 'session-warning'\n    });\n    localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\n  }\n  return timeDifference > API_CONFIG.SESSION_TIMEOUT;\n};\n\n// API Instance\nconst Api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  const currentDateTime = getCurrentUTCDateTime();\n  if (!config.url.includes('/login') && checkSessionExpiry()) {\n    clearStorage(true);\n    window.location.href = '/login?session=expired';\n    return Promise.reject('Session expired');\n  }\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.metadata = {\n    startTime: new Date().getTime(),\n    requestId: Math.random().toString(36).substring(7),\n    timestamp: currentDateTime,\n    systemInfo: getSystemInfo()\n  };\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const currentDateTime = getCurrentUTCDateTime();\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return {\n    ...response,\n    timestamp: currentDateTime,\n    duration: new Date().getTime() - response.config.metadata.startTime\n  };\n}, error => {\n  var _error$response;\n  if (!error.config.url.includes('/login') && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage(true);\n    window.location.href = '/login?session=expired';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response3, _error$response4;\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n  const currentDateTime = getCurrentUTCDateTime();\n  const userData = getStoredUserData();\n  console.error('API Error:', {\n    message: errorMessage,\n    timestamp: currentDateTime,\n    currentUser: userData === null || userData === void 0 ? void 0 : userData.nickname,\n    error: error\n  });\n  if (!error.config.url.includes('/login')) {\n    toast.error(errorMessage);\n  }\n  return {\n    message: errorMessage,\n    timestamp: currentDateTime,\n    status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n    data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data\n  };\n};\n\n// API Functions\nexport const loginApi = async data => {\n  try {\n    var _response$data;\n    localStorage.setItem(STORAGE_KEYS.LOGIN_IN_PROGRESS, 'true');\n    const currentDateTime = getCurrentUTCDateTime();\n    const loginData = {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    };\n    const response = await Api.post('/users/login', loginData);\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) {\n      const {\n        user,\n        token\n      } = response.data.data;\n      const sessionId = Math.random().toString(36).substring(7);\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\n      localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\n      localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\n      localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n      const userData = {\n        ...user,\n        sessionId,\n        lastLogin: currentDateTime,\n        lastActive: currentDateTime\n      };\n      updateStoredUserData(userData);\n      console.log('Login successful:', {\n        userId: user._id,\n        nickname: user.nickname,\n        sessionId,\n        timestamp: currentDateTime\n      });\n    }\n    localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\n    return response;\n  } catch (error) {\n    localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\n    throw handleApiError(error);\n  }\n};\nexport const signupApi = async data => {\n  try {\n    const currentDateTime = getCurrentUTCDateTime();\n    const response = await Api.post('/users/signup', {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    });\n    toast.success('Registration successful! Please log in.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const createConfession = async confessionData => {\n  try {\n    var _response$data2;\n    const formData = new FormData();\n    const currentDateTime = getCurrentUTCDateTime();\n    const currentData = {\n      ...confessionData,\n      timestamp: currentDateTime,\n      createdBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.post('users/confessions/create', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.success) {\n      toast.success('Confession created successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateConfession = async (id, confessionData) => {\n  try {\n    var _response$data3;\n    const formData = new FormData();\n    const currentDateTime = getCurrentUTCDateTime();\n    const currentData = {\n      ...confessionData,\n      updatedAt: currentDateTime,\n      lastModifiedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.put(`users/confessions/${id}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success) {\n      toast.success('Confession updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const deleteConfession = async id => {\n  try {\n    var _response$data4;\n    const response = await Api.delete(`users/confessions/${id}`, {\n      data: {\n        timestamp: getCurrentUTCDateTime(),\n        deletedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\n      }\n    });\n    if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) {\n      toast.success('Confession deleted successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserConfessions = async () => {\n  try {\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    return await Api.get(`users/confessions/my?timestamp=${getCurrentUTCDateTime()}&userId=${userId}`);\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    var _response$data5;\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) throw new Error('User ID not found');\n    const response = await Api.get(`/users/profile/${userId}?timestamp=${getCurrentUTCDateTime()}`);\n    if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.data) {\n      updateStoredUserData(response.data.data);\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    var _response$data6;\n    const currentDateTime = getCurrentUTCDateTime();\n    const response = await Api.put('/users/profile/update', {\n      ...userData,\n      timestamp: currentDateTime,\n      lastModified: currentDateTime\n    });\n    if ((_response$data6 = response.data) !== null && _response$data6 !== void 0 && _response$data6.success) {\n      updateStoredUserData(response.data.user);\n      toast.success('Profile updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const changePassword = async passwordData => {\n  try {\n    var _response$data7;\n    const response = await Api.put('/users/change-password', {\n      ...passwordData,\n      timestamp: getCurrentUTCDateTime(),\n      userId: localStorage.getItem(STORAGE_KEYS.USER_ID)\n    });\n    if ((_response$data7 = response.data) !== null && _response$data7 !== void 0 && _response$data7.success) {\n      toast.success('Password changed successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const forgotPasswordApi = async email => {\n  try {\n    const response = await Api.post('/users/forgot-password', {\n      email,\n      timestamp: getCurrentUTCDateTime()\n    });\n    toast.success('Password reset link sent to your email!');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const resetPasswordApi = async (token, newPassword) => {\n  try {\n    const response = await Api.post(`/users/reset-password/${token}`, {\n      newPassword,\n      timestamp: getCurrentUTCDateTime()\n    });\n    toast.success('Password reset successful! Please login with your new password.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const submitContactUs = async contactData => {\n  try {\n    var _response$data8;\n    const response = await Api.post('/users/contactUs', {\n      ...contactData,\n      timestamp: getCurrentUTCDateTime(),\n      userId: localStorage.getItem(STORAGE_KEYS.USER_ID) || null\n    });\n    if ((_response$data8 = response.data) !== null && _response$data8 !== void 0 && _response$data8.success) {\n      toast.success('Message sent successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};","map":{"version":3,"names":["axios","toast","API_CONFIG","BASE_URL","process","env","REACT_APP_API_BASE_URL","TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","SESSION_TIMEOUT","REACT_APP_SESSION_TIMEOUT","WARNING_TIME","REACT_APP_WARNING_TIME","CHECK_INTERVAL","REACT_APP_CHECK_INTERVAL","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","SESSION_ID","SESSION_START","SESSION_WARNING_SHOWN","REMEMBER_ME","REMEMBERED_EMAIL","LOGIN_IN_PROGRESS","getCurrentUTCDateTime","now","Date","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","getSystemInfo","userData","getStoredUserData","userAgent","navigator","platform","language","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","screenResolution","window","screen","width","height","timestamp","currentUser","nickname","clearStorage","preserveEmail","localStorage","getItem","rememberedEmail","Object","keys","forEach","key","removeItem","sessionStorage","error","console","setItem","updateStoredUserData","currentDateTime","storedUser","lastActive","lastUpdated","systemInfo","JSON","stringify","Error","checkSessionExpiry","currentTime","getTime","lastActiveTime","timeDifference","warning","toastId","Api","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","url","includes","location","href","Promise","reject","Authorization","metadata","startTime","requestId","Math","random","toString","substring","handleApiError","response","duration","_error$response","status","_error$response2","_error$response2$data","_error$response3","_error$response4","errorMessage","data","message","loginApi","_response$data","loginData","post","success","user","sessionId","_id","lastLogin","log","userId","signupApi","createConfession","confessionData","_response$data2","formData","FormData","currentData","createdBy","append","image","updateConfession","id","_response$data3","updatedAt","lastModifiedBy","put","deleteConfession","_response$data4","delete","deletedBy","getUserConfessions","get","getUserProfile","_response$data5","updateUserProfile","_response$data6","lastModified","changePassword","passwordData","_response$data7","forgotPasswordApi","email","resetPasswordApi","newPassword","submitContactUs","contactData","_response$data8"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Configuration Constants\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\r\n    SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\r\n    WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\r\n    CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\r\n};\r\n\r\n// Storage Keys\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_ID: 'sessionId',\r\n    SESSION_START: 'sessionStart',\r\n    SESSION_WARNING_SHOWN: 'sessionWarningShown',\r\n    REMEMBER_ME: 'rememberMe',\r\n    REMEMBERED_EMAIL: 'rememberedEmail',\r\n    LOGIN_IN_PROGRESS: 'loginInProgress'\r\n};\r\n\r\n// Utility Functions\r\nconst getCurrentUTCDateTime = () => {\r\n    const now = new Date();\r\n    const year = now.getUTCFullYear();\r\n    const month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n    const day = String(now.getUTCDate()).padStart(2, '0');\r\n    const hours = String(now.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n    const seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nconst getSystemInfo = () => {\r\n    const userData = getStoredUserData();\r\n    return {\r\n        userAgent: navigator.userAgent,\r\n        platform: navigator.platform,\r\n        language: navigator.language,\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n        timestamp: getCurrentUTCDateTime(),\r\n        currentUser: userData?.nickname || null\r\n    };\r\n};\r\n\r\nconst clearStorage = (preserveEmail = false) => {\r\n    if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\r\n        return;\r\n    }\r\n\r\n    const rememberedEmail = preserveEmail ? localStorage.getItem(STORAGE_KEYS.REMEMBERED_EMAIL) : null;\r\n    \r\n    Object.keys(localStorage).forEach(key => {\r\n        if (key !== STORAGE_KEYS.REMEMBERED_EMAIL || !preserveEmail) {\r\n            try {\r\n                localStorage.removeItem(key);\r\n                sessionStorage.removeItem(key);\r\n            } catch (error) {\r\n                console.error(`Error clearing storage key ${key}:`, error);\r\n            }\r\n        }\r\n    });\r\n\r\n    if (preserveEmail && rememberedEmail) {\r\n        localStorage.setItem(STORAGE_KEYS.REMEMBERED_EMAIL, rememberedEmail);\r\n    }\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    const storedUser = {\r\n        ...userData,\r\n        lastActive: currentDateTime,\r\n        lastUpdated: currentDateTime,\r\n        systemInfo: getSystemInfo()\r\n    };\r\n\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n    } catch (error) {\r\n        console.error('Error updating user data:', error);\r\n        throw new Error('Failed to update user data');\r\n    }\r\n};\r\n\r\nconst checkSessionExpiry = () => {\r\n    if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\r\n        return false;\r\n    }\r\n\r\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n    if (!lastActive) return true;\r\n\r\n    const currentTime = new Date().getTime();\r\n    const lastActiveTime = new Date(lastActive).getTime();\r\n    const timeDifference = currentTime - lastActiveTime;\r\n\r\n    if (timeDifference > API_CONFIG.WARNING_TIME && \r\n        !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\r\n        toast.warning('Your session will expire soon. Please save your work.', {\r\n            toastId: 'session-warning'\r\n        });\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\r\n    }\r\n\r\n    return timeDifference > API_CONFIG.SESSION_TIMEOUT;\r\n};\r\n\r\n// API Instance\r\nconst Api = axios.create({\r\n    baseURL: API_CONFIG.BASE_URL,\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        if (!config.url.includes('/login') && checkSessionExpiry()) {\r\n            clearStorage(true);\r\n            window.location.href = '/login?session=expired';\r\n            return Promise.reject('Session expired');\r\n        }\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        config.metadata = {\r\n            startTime: new Date().getTime(),\r\n            requestId: Math.random().toString(36).substring(7),\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        \r\n        return {\r\n            ...response,\r\n            timestamp: currentDateTime,\r\n            duration: new Date().getTime() - response.config.metadata.startTime\r\n        };\r\n    },\r\n    (error) => {\r\n        if (!error.config.url.includes('/login') && error.response?.status === 401) {\r\n            clearStorage(true);\r\n            window.location.href = '/login?session=expired';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    const userData = getStoredUserData();\r\n    \r\n    console.error('API Error:', {\r\n        message: errorMessage,\r\n        timestamp: currentDateTime,\r\n        currentUser: userData?.nickname,\r\n        error: error\r\n    });\r\n\r\n    if (!error.config.url.includes('/login')) {\r\n        toast.error(errorMessage);\r\n    }\r\n\r\n    return {\r\n        message: errorMessage,\r\n        timestamp: currentDateTime,\r\n        status: error.response?.status,\r\n        data: error.response?.data\r\n    };\r\n};\r\n\r\n// API Functions\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.LOGIN_IN_PROGRESS, 'true');\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const loginData = {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        const response = await Api.post('/users/login', loginData);\r\n\r\n        if (response.data?.success) {\r\n            const { user, token } = response.data.data;\r\n            const sessionId = Math.random().toString(36).substring(7);\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\r\n            localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n            \r\n            const userData = {\r\n                ...user,\r\n                sessionId,\r\n                lastLogin: currentDateTime,\r\n                lastActive: currentDateTime\r\n            };\r\n\r\n            updateStoredUserData(userData);\r\n\r\n            console.log('Login successful:', {\r\n                userId: user._id,\r\n                nickname: user.nickname,\r\n                sessionId,\r\n                timestamp: currentDateTime\r\n            });\r\n        }\r\n        \r\n        localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\r\n        return response;\r\n    } catch (error) {\r\n        localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        const response = await Api.post('/users/signup', {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        });\r\n        toast.success('Registration successful! Please log in.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const createConfession = async (confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            timestamp: currentDateTime,\r\n            createdBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.post('users/confessions/create', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession created successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateConfession = async (id, confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            updatedAt: currentDateTime,\r\n            lastModifiedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.put(`users/confessions/${id}`, formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession updated successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const deleteConfession = async (id) => {\r\n    try {\r\n        const response = await Api.delete(`users/confessions/${id}`, {\r\n            data: {\r\n                timestamp: getCurrentUTCDateTime(),\r\n                deletedBy: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n            }\r\n        });\r\n        if (response.data?.success) {\r\n            toast.success('Confession deleted successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserConfessions = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        return await Api.get(`users/confessions/my?timestamp=${getCurrentUTCDateTime()}&userId=${userId}`);\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        if (!userId) throw new Error('User ID not found');\r\n\r\n        const response = await Api.get(`/users/profile/${userId}?timestamp=${getCurrentUTCDateTime()}`);\r\n        if (response.data?.data) {\r\n            updateStoredUserData(response.data.data);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateUserProfile = async (userData) => {\r\n    try {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        const response = await Api.put('/users/profile/update', {\r\n            ...userData,\r\n            timestamp: currentDateTime,\r\n            lastModified: currentDateTime\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            updateStoredUserData(response.data.user);\r\n            toast.success('Profile updated successfully!');\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const changePassword = async (passwordData) => {\r\n    try {\r\n        const response = await Api.put('/users/change-password', {\r\n            ...passwordData,\r\n            timestamp: getCurrentUTCDateTime(),\r\n            userId: localStorage.getItem(STORAGE_KEYS.USER_ID)\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            toast.success('Password changed successfully!');\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const forgotPasswordApi = async (email) => {\r\n    try {\r\n        const response = await Api.post('/users/forgot-password', {\r\n            email,\r\n            timestamp: getCurrentUTCDateTime()\r\n        });\r\n        toast.success('Password reset link sent to your email!');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const resetPasswordApi = async (token, newPassword) => {\r\n    try {\r\n        const response = await Api.post(`/users/reset-password/${token}`, {\r\n            newPassword,\r\n            timestamp: getCurrentUTCDateTime()\r\n        });\r\n        toast.success('Password reset successful! Please login with your new password.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const submitContactUs = async (contactData) => {\r\n    try {\r\n        const response = await Api.post('/users/contactUs', {\r\n            ...contactData,\r\n            timestamp: getCurrentUTCDateTime(),\r\n            userId: localStorage.getItem(STORAGE_KEYS.USER_ID) || null\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            toast.success('Message sent successfully!');\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}