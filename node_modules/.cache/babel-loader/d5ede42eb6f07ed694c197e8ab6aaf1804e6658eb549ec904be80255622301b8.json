{"ast":null,"code":"import axios from 'axios';\n\n// Creating backend configuration\nconst Api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include token in all requests\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle common error cases\nApi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear stored data on authentication error\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('user');\n\n    // Redirect to login page\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Signup API call\nexport const signupApi = async data => {\n  try {\n    const response = await Api.post('users/signup', data);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Login API call\nexport const loginApi = async data => {\n  try {\n    const response = await Api.post('users/login', data);\n\n    // Check if the response contains the expected data\n    if (response.data && response.data.data) {\n      const {\n        token,\n        user\n      } = response.data.data;\n\n      // Store authentication data\n      localStorage.setItem('token', token);\n      localStorage.setItem('userId', user._id);\n\n      // Store user data\n      localStorage.setItem('user', JSON.stringify({\n        _id: user._id,\n        nickname: user.nickname,\n        email: user.email\n      }));\n    }\n    return response;\n  } catch (error) {\n    // Clear any existing auth data on login failure\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('user');\n    throw error;\n  }\n};\n\n// Get user profile API call\nexport const getUserProfile = async userId => {\n  try {\n    const response = await Api.get(`users/profile/${userId}`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Logout function\nexport const logoutApi = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('user');\n  window.location.href = '/login';\n};\n\n// Function to check if user is authenticated\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  const userId = localStorage.getItem('userId');\n  return !!(token && userId);\n};\n\n// Function to get stored user data\nexport const getStoredUserData = () => {\n  const userString = localStorage.getItem('user');\n  if (userString) {\n    try {\n      return JSON.parse(userString);\n    } catch (error) {\n      console.error('Error parsing stored user data:', error);\n      return null;\n    }\n  }\n  return null;\n};\nexport default Api;","map":{"version":3,"names":["axios","Api","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","signupApi","data","post","loginApi","user","setItem","_id","JSON","stringify","nickname","email","getUserProfile","userId","get","logoutApi","isAuthenticated","getStoredUserData","userString","parse","console"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Creating backend configuration\r\nconst Api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Add request interceptor to include token in all requests\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add response interceptor to handle common error cases\r\nApi.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n        if (error.response?.status === 401) {\r\n            // Clear stored data on authentication error\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('userId');\r\n            localStorage.removeItem('user');\r\n            \r\n            // Redirect to login page\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Signup API call\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('users/signup', data);\r\n        return response;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Login API call\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('users/login', data);\r\n        \r\n        // Check if the response contains the expected data\r\n        if (response.data && response.data.data) {\r\n            const { token, user } = response.data.data;\r\n            \r\n            // Store authentication data\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('userId', user._id);\r\n            \r\n            // Store user data\r\n            localStorage.setItem('user', JSON.stringify({\r\n                _id: user._id,\r\n                nickname: user.nickname,\r\n                email: user.email\r\n            }));\r\n        }\r\n        \r\n        return response;\r\n    } catch (error) {\r\n        // Clear any existing auth data on login failure\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userId');\r\n        localStorage.removeItem('user');\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Get user profile API call\r\nexport const getUserProfile = async (userId) => {\r\n    try {\r\n        const response = await Api.get(`users/profile/${userId}`);\r\n        return response;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Logout function\r\nexport const logoutApi = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('user');\r\n    window.location.href = '/login';\r\n};\r\n\r\n// Function to check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n    const token = localStorage.getItem('token');\r\n    const userId = localStorage.getItem('userId');\r\n    return !!(token && userId);\r\n};\r\n\r\n// Function to get stored user data\r\nexport const getStoredUserData = () => {\r\n    const userString = localStorage.getItem('user');\r\n    if (userString) {\r\n        try {\r\n            return JSON.parse(userString);\r\n        } catch (error) {\r\n            console.error('Error parsing stored user data:', error);\r\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}