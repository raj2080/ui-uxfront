{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nconst SESSION_TIMEOUT = 60 * 1000; // 1 minute\nconst CHECK_INTERVAL = 10 * 1000; // Check every 10 seconds\nconst WARNING_TIME = 45 * 1000; // Show warning 15 seconds before timeout\n\nconst SessionManager = () => {\n  _s();\n  const navigate = useNavigate();\n  const checkSession = useCallback(() => {\n    const lastActive = localStorage.getItem('lastActive');\n    if (!lastActive) return;\n    const currentTime = new Date().getTime();\n    const lastActiveTime = new Date(lastActive).getTime();\n    const timeDifference = currentTime - lastActiveTime;\n\n    // Show warning when 15 seconds remaining\n    if (timeDifference > WARNING_TIME && timeDifference < SESSION_TIMEOUT) {\n      toast.warning('Your session will expire in 15 seconds. Please save your work.', {\n        toastId: 'session-warning'\n      });\n    }\n\n    // Logout if session expired\n    if (timeDifference > SESSION_TIMEOUT) {\n      localStorage.clear();\n      sessionStorage.clear();\n      toast.error('Session expired. Please login again.', {\n        toastId: 'session-expired'\n      });\n      navigate('/login?session=expired');\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const interval = setInterval(checkSession, CHECK_INTERVAL);\n\n    // Event listeners for user activity\n    const updateActivity = () => {\n      localStorage.setItem('lastActive', new Date().toISOString());\n    };\n    window.addEventListener('mousemove', updateActivity);\n    window.addEventListener('keydown', updateActivity);\n    window.addEventListener('click', updateActivity);\n    window.addEventListener('scroll', updateActivity);\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('mousemove', updateActivity);\n      window.removeEventListener('keydown', updateActivity);\n      window.removeEventListener('click', updateActivity);\n      window.removeEventListener('scroll', updateActivity);\n    };\n  }, [checkSession]);\n  return null;\n};\n_s(SessionManager, \"AJCGzbMZGabPQZ4T7GCmyTFSGmw=\", false, function () {\n  return [useNavigate];\n});\n_c = SessionManager;\nexport default SessionManager;\nvar _c;\n$RefreshReg$(_c, \"SessionManager\");","map":{"version":3,"names":["useEffect","useCallback","useNavigate","toast","SESSION_TIMEOUT","CHECK_INTERVAL","WARNING_TIME","SessionManager","_s","navigate","checkSession","lastActive","localStorage","getItem","currentTime","Date","getTime","lastActiveTime","timeDifference","warning","toastId","clear","sessionStorage","error","interval","setInterval","updateActivity","setItem","toISOString","window","addEventListener","clearInterval","removeEventListener","_c","$RefreshReg$"],"sources":["C:/uiux development/frontend/confessapp/src/components/SessionManager/SessionManager.jsx"],"sourcesContent":["import { useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst SESSION_TIMEOUT = 60 * 1000; // 1 minute\r\nconst CHECK_INTERVAL = 10 * 1000; // Check every 10 seconds\r\nconst WARNING_TIME = 45 * 1000; // Show warning 15 seconds before timeout\r\n\r\nconst SessionManager = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const checkSession = useCallback(() => {\r\n        const lastActive = localStorage.getItem('lastActive');\r\n        if (!lastActive) return;\r\n\r\n        const currentTime = new Date().getTime();\r\n        const lastActiveTime = new Date(lastActive).getTime();\r\n        const timeDifference = currentTime - lastActiveTime;\r\n\r\n        // Show warning when 15 seconds remaining\r\n        if (timeDifference > WARNING_TIME && timeDifference < SESSION_TIMEOUT) {\r\n            toast.warning('Your session will expire in 15 seconds. Please save your work.', {\r\n                toastId: 'session-warning'\r\n            });\r\n        }\r\n\r\n        // Logout if session expired\r\n        if (timeDifference > SESSION_TIMEOUT) {\r\n            localStorage.clear();\r\n            sessionStorage.clear();\r\n            toast.error('Session expired. Please login again.', {\r\n                toastId: 'session-expired'\r\n            });\r\n            navigate('/login?session=expired');\r\n        }\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(checkSession, CHECK_INTERVAL);\r\n        \r\n        // Event listeners for user activity\r\n        const updateActivity = () => {\r\n            localStorage.setItem('lastActive', new Date().toISOString());\r\n        };\r\n\r\n        window.addEventListener('mousemove', updateActivity);\r\n        window.addEventListener('keydown', updateActivity);\r\n        window.addEventListener('click', updateActivity);\r\n        window.addEventListener('scroll', updateActivity);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n            window.removeEventListener('mousemove', updateActivity);\r\n            window.removeEventListener('keydown', updateActivity);\r\n            window.removeEventListener('click', updateActivity);\r\n            window.removeEventListener('scroll', updateActivity);\r\n        };\r\n    }, [checkSession]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default SessionManager;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AACnC,MAAMC,cAAc,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAClC,MAAMC,YAAY,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEhC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAMQ,YAAY,GAAGT,WAAW,CAAC,MAAM;IACnC,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,IAAI,CAACF,UAAU,EAAE;IAEjB,MAAMG,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxC,MAAMC,cAAc,GAAG,IAAIF,IAAI,CAACJ,UAAU,CAAC,CAACK,OAAO,CAAC,CAAC;IACrD,MAAME,cAAc,GAAGJ,WAAW,GAAGG,cAAc;;IAEnD;IACA,IAAIC,cAAc,GAAGZ,YAAY,IAAIY,cAAc,GAAGd,eAAe,EAAE;MACnED,KAAK,CAACgB,OAAO,CAAC,gEAAgE,EAAE;QAC5EC,OAAO,EAAE;MACb,CAAC,CAAC;IACN;;IAEA;IACA,IAAIF,cAAc,GAAGd,eAAe,EAAE;MAClCQ,YAAY,CAACS,KAAK,CAAC,CAAC;MACpBC,cAAc,CAACD,KAAK,CAAC,CAAC;MACtBlB,KAAK,CAACoB,KAAK,CAAC,sCAAsC,EAAE;QAChDH,OAAO,EAAE;MACb,CAAC,CAAC;MACFX,QAAQ,CAAC,wBAAwB,CAAC;IACtC;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdT,SAAS,CAAC,MAAM;IACZ,MAAMwB,QAAQ,GAAGC,WAAW,CAACf,YAAY,EAAEL,cAAc,CAAC;;IAE1D;IACA,MAAMqB,cAAc,GAAGA,CAAA,KAAM;MACzBd,YAAY,CAACe,OAAO,CAAC,YAAY,EAAE,IAAIZ,IAAI,CAAC,CAAC,CAACa,WAAW,CAAC,CAAC,CAAC;IAChE,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAEJ,cAAc,CAAC;IACpDG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,cAAc,CAAC;IAClDG,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEJ,cAAc,CAAC;IAChDG,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEJ,cAAc,CAAC;IAEjD,OAAO,MAAM;MACTK,aAAa,CAACP,QAAQ,CAAC;MACvBK,MAAM,CAACG,mBAAmB,CAAC,WAAW,EAAEN,cAAc,CAAC;MACvDG,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAEN,cAAc,CAAC;MACrDG,MAAM,CAACG,mBAAmB,CAAC,OAAO,EAAEN,cAAc,CAAC;MACnDG,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEN,cAAc,CAAC;IACxD,CAAC;EACL,CAAC,EAAE,CAAChB,YAAY,CAAC,CAAC;EAElB,OAAO,IAAI;AACf,CAAC;AAACF,EAAA,CApDID,cAAc;EAAA,QACCL,WAAW;AAAA;AAAA+B,EAAA,GAD1B1B,cAAc;AAsDpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}