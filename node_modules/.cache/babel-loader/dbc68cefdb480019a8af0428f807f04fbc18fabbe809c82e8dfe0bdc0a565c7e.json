{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { getCurrentUTCDateTime, formatUTCDateTime, isValidDateTime } from '../utils/dateUtils';\nimport { getCurrentUserLogin, getSystemInfo } from '../utils/userUtils';\n\n// API Configuration\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\n  WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\n  CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\n};\n\n// Storage Keys\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_ID: 'sessionId',\n  SESSION_START: 'sessionStart',\n  SESSION_WARNING_SHOWN: 'sessionWarningShown',\n  SYSTEM_INFO: 'systemInfo',\n  LOGIN_ATTEMPTS: 'loginAttempts'\n};\n\n// Create API instance\nconst Api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Helper Functions\nconst clearStorage = () => {\n  Object.values(STORAGE_KEYS).forEach(key => {\n    try {\n      localStorage.removeItem(key);\n      sessionStorage.removeItem(key);\n    } catch (error) {\n      console.error(`Error clearing storage for key ${key}:`, error);\n    }\n  });\n\n  // Clear cookies\n  document.cookie.split(\";\").forEach(cookie => {\n    document.cookie = cookie.replace(/^ +/, \"\").replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n  });\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const currentDateTime = getCurrentUTCDateTime();\n  const userToStore = {\n    _id: userData._id || userData.id,\n    nickname: userData.nickname,\n    email: userData.email,\n    updatedAt: userData.updatedAt || currentDateTime,\n    lastActive: currentDateTime,\n    sessionId: userData.sessionId || localStorage.getItem(STORAGE_KEYS.SESSION_ID),\n    systemInfo: getSystemInfo()\n  };\n  try {\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n    localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\n  } catch (error) {\n    console.error('Error updating stored user data:', error);\n    throw new Error('Failed to store user data');\n  }\n};\nconst checkSessionExpiry = () => {\n  const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n  if (!lastActive || !isValidDateTime(lastActive)) return true;\n  const currentTime = new Date().getTime();\n  const lastActiveTime = new Date(lastActive).getTime();\n  const timeDifference = currentTime - lastActiveTime;\n\n  // Show warning when approaching timeout\n  if (timeDifference > API_CONFIG.WARNING_TIME && !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\n    toast.warning('Your session will expire in 15 seconds. Please save your work.', {\n      toastId: 'session-warning'\n    });\n    localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\n  }\n  return timeDifference > API_CONFIG.SESSION_TIMEOUT;\n};\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  const currentDateTime = getCurrentUTCDateTime();\n  if (checkSessionExpiry()) {\n    clearStorage();\n    window.location.href = '/login?session=expired';\n    return Promise.reject('Session expired');\n  }\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  config.metadata = {\n    startTime: new Date(),\n    requestId: Math.random().toString(36).substring(7),\n    timestamp: currentDateTime,\n    user: getCurrentUserLogin(),\n    systemInfo: getSystemInfo()\n  };\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Request:', {\n      url: config.url,\n      method: config.method,\n      requestId: config.metadata.requestId,\n      headers: config.headers,\n      timestamp: config.metadata.timestamp,\n      user: config.metadata.user,\n      systemInfo: config.metadata.systemInfo\n    });\n  }\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const currentDateTime = getCurrentUTCDateTime();\n  const requestStartTime = response.config.metadata.startTime;\n  response.duration = new Date() - requestStartTime;\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Response:', {\n      url: response.config.url,\n      status: response.status,\n      duration: response.duration,\n      requestId: response.config.metadata.requestId,\n      timestamp: currentDateTime,\n      data: response.data\n    });\n  }\n  return response;\n}, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage();\n    window.location.href = '/login?session=expired';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response5, _error$response6;\n  const currentDateTime = getCurrentUTCDateTime();\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n  if (process.env.NODE_ENV === 'development') {\n    var _error$response3, _error$response4, _error$config, _error$config2;\n    console.error('API Error:', {\n      message: errorMessage,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n      timestamp: currentDateTime,\n      user: getCurrentUserLogin(),\n      systemInfo: getSystemInfo()\n    });\n  }\n  toast.error(errorMessage);\n  return {\n    message: errorMessage,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    data: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n    timestamp: currentDateTime,\n    user: getCurrentUserLogin(),\n    systemInfo: getSystemInfo(),\n    originalError: error\n  };\n};\n\n// API Functions\nexport const signupApi = async data => {\n  try {\n    const currentDateTime = getCurrentUTCDateTime();\n    const response = await Api.post('/users/signup', {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    });\n    toast.success('Registration successful! Please log in.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const loginApi = async data => {\n  try {\n    var _response$data, _response$data$data, _response$data2, _response$data2$data;\n    const currentDateTime = getCurrentUTCDateTime();\n\n    // Clear any existing session data\n    clearStorage();\n\n    // Prepare login data with system information\n    const loginData = {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo(),\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    };\n\n    // Make login request\n    const response = await Api.post('/users/login', loginData);\n\n    // Validate response\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$data = _response$data.data) !== null && _response$data$data !== void 0 && _response$data$data.user) || !((_response$data2 = response.data) !== null && _response$data2 !== void 0 && (_response$data2$data = _response$data2.data) !== null && _response$data2$data !== void 0 && _response$data2$data.token)) {\n      throw new Error('Invalid response from server');\n    }\n    const {\n      user,\n      token,\n      sessionId\n    } = response.data.data;\n\n    // Store session information\n    localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n    localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\n    localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId || Math.random().toString(36).substring(7));\n    localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n\n    // Update user data in storage\n    updateStoredUserData({\n      ...user,\n      sessionId: sessionId,\n      lastLogin: currentDateTime\n    });\n\n    // Log successful login\n    console.log('Login successful:', {\n      userId: user._id || user.id,\n      nickname: user.nickname,\n      sessionId: sessionId,\n      timestamp: currentDateTime\n    });\n    toast.success(`Welcome back, ${user.nickname}!`);\n    return response;\n  } catch (error) {\n    clearStorage();\n    throw handleApiError(error);\n  }\n};\n\n// ... (Continue with the rest of your API functions, following the same pattern)\n// Make sure to include all the functions from your original file, updating them\n// to use the new timestamp and user utilities\n\n// Initialize session check interval\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    if (isLoggedIn()) {\n      checkSessionExpiry();\n    }\n  }, API_CONFIG.CHECK_INTERVAL);\n}\nexport default Api;","map":{"version":3,"names":["axios","toast","getCurrentUTCDateTime","formatUTCDateTime","isValidDateTime","getCurrentUserLogin","getSystemInfo","API_CONFIG","BASE_URL","process","env","REACT_APP_API_BASE_URL","TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","SESSION_TIMEOUT","REACT_APP_SESSION_TIMEOUT","WARNING_TIME","REACT_APP_WARNING_TIME","CHECK_INTERVAL","REACT_APP_CHECK_INTERVAL","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","SESSION_ID","SESSION_START","SESSION_WARNING_SHOWN","SYSTEM_INFO","LOGIN_ATTEMPTS","Api","create","baseURL","timeout","withCredentials","headers","clearStorage","Object","values","forEach","key","localStorage","removeItem","sessionStorage","error","console","document","cookie","split","replace","Date","toUTCString","updateStoredUserData","userData","currentDateTime","userToStore","_id","id","nickname","email","updatedAt","lastActive","sessionId","getItem","systemInfo","setItem","JSON","stringify","Error","checkSessionExpiry","currentTime","getTime","lastActiveTime","timeDifference","warning","toastId","interceptors","request","use","config","token","window","location","href","Promise","reject","Authorization","metadata","startTime","requestId","Math","random","toString","substring","timestamp","user","NODE_ENV","log","url","method","handleApiError","response","requestStartTime","duration","status","data","_error$response","_error$response2","_error$response2$data","_error$response5","_error$response6","errorMessage","message","_error$response3","_error$response4","_error$config","_error$config2","originalError","signupApi","post","success","loginApi","_response$data","_response$data$data","_response$data2","_response$data2$data","loginData","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","lastLogin","userId","setInterval","isLoggedIn"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { getCurrentUTCDateTime, formatUTCDateTime, isValidDateTime } from '../utils/dateUtils';\r\nimport { getCurrentUserLogin, getSystemInfo } from '../utils/userUtils';\r\n\r\n// API Configuration\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\r\n    SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\r\n    WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\r\n    CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\r\n};\r\n\r\n// Storage Keys\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_ID: 'sessionId',\r\n    SESSION_START: 'sessionStart',\r\n    SESSION_WARNING_SHOWN: 'sessionWarningShown',\r\n    SYSTEM_INFO: 'systemInfo',\r\n    LOGIN_ATTEMPTS: 'loginAttempts'\r\n};\r\n\r\n// Create API instance\r\nconst Api = axios.create({\r\n    baseURL: API_CONFIG.BASE_URL,\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Helper Functions\r\nconst clearStorage = () => {\r\n    Object.values(STORAGE_KEYS).forEach(key => {\r\n        try {\r\n            localStorage.removeItem(key);\r\n            sessionStorage.removeItem(key);\r\n        } catch (error) {\r\n            console.error(`Error clearing storage for key ${key}:`, error);\r\n        }\r\n    });\r\n\r\n    // Clear cookies\r\n    document.cookie.split(\";\").forEach(cookie => {\r\n        document.cookie = cookie\r\n            .replace(/^ +/, \"\")\r\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\r\n    });\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n\r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    \r\n    const userToStore = {\r\n        _id: userData._id || userData.id,\r\n        nickname: userData.nickname,\r\n        email: userData.email,\r\n        updatedAt: userData.updatedAt || currentDateTime,\r\n        lastActive: currentDateTime,\r\n        sessionId: userData.sessionId || localStorage.getItem(STORAGE_KEYS.SESSION_ID),\r\n        systemInfo: getSystemInfo()\r\n    };\r\n\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\r\n    } catch (error) {\r\n        console.error('Error updating stored user data:', error);\r\n        throw new Error('Failed to store user data');\r\n    }\r\n};\r\n\r\nconst checkSessionExpiry = () => {\r\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n    if (!lastActive || !isValidDateTime(lastActive)) return true;\r\n\r\n    const currentTime = new Date().getTime();\r\n    const lastActiveTime = new Date(lastActive).getTime();\r\n    const timeDifference = currentTime - lastActiveTime;\r\n\r\n    // Show warning when approaching timeout\r\n    if (timeDifference > API_CONFIG.WARNING_TIME && \r\n        !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\r\n        toast.warning('Your session will expire in 15 seconds. Please save your work.', {\r\n            toastId: 'session-warning'\r\n        });\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\r\n    }\r\n\r\n    return timeDifference > API_CONFIG.SESSION_TIMEOUT;\r\n};\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        if (checkSessionExpiry()) {\r\n            clearStorage();\r\n            window.location.href = '/login?session=expired';\r\n            return Promise.reject('Session expired');\r\n        }\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n\r\n        config.metadata = {\r\n            startTime: new Date(),\r\n            requestId: Math.random().toString(36).substring(7),\r\n            timestamp: currentDateTime,\r\n            user: getCurrentUserLogin(),\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Request:', {\r\n                url: config.url,\r\n                method: config.method,\r\n                requestId: config.metadata.requestId,\r\n                headers: config.headers,\r\n                timestamp: config.metadata.timestamp,\r\n                user: config.metadata.user,\r\n                systemInfo: config.metadata.systemInfo\r\n            });\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        const requestStartTime = response.config.metadata.startTime;\r\n        response.duration = new Date() - requestStartTime;\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Response:', {\r\n                url: response.config.url,\r\n                status: response.status,\r\n                duration: response.duration,\r\n                requestId: response.config.metadata.requestId,\r\n                timestamp: currentDateTime,\r\n                data: response.data\r\n            });\r\n        }\r\n\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        if (error.response?.status === 401) {\r\n            clearStorage();\r\n            window.location.href = '/login?session=expired';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.error('API Error:', {\r\n            message: errorMessage,\r\n            status: error.response?.status,\r\n            data: error.response?.data,\r\n            url: error.config?.url,\r\n            method: error.config?.method,\r\n            timestamp: currentDateTime,\r\n            user: getCurrentUserLogin(),\r\n            systemInfo: getSystemInfo()\r\n        });\r\n    }\r\n\r\n    toast.error(errorMessage);\r\n    \r\n    return {\r\n        message: errorMessage,\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        timestamp: currentDateTime,\r\n        user: getCurrentUserLogin(),\r\n        systemInfo: getSystemInfo(),\r\n        originalError: error\r\n    };\r\n};\r\n\r\n// API Functions\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        const response = await Api.post('/users/signup', {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        });\r\n        \r\n        toast.success('Registration successful! Please log in.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        // Clear any existing session data\r\n        clearStorage();\r\n        \r\n        // Prepare login data with system information\r\n        const loginData = {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo(),\r\n            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n        };\r\n\r\n        // Make login request\r\n        const response = await Api.post('/users/login', loginData);\r\n\r\n        // Validate response\r\n        if (!response.data?.data?.user || !response.data?.data?.token) {\r\n            throw new Error('Invalid response from server');\r\n        }\r\n\r\n        const { user, token, sessionId } = response.data.data;\r\n\r\n        // Store session information\r\n        localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n        localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId || Math.random().toString(36).substring(7));\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n\r\n        // Update user data in storage\r\n        updateStoredUserData({\r\n            ...user,\r\n            sessionId: sessionId,\r\n            lastLogin: currentDateTime\r\n        });\r\n\r\n        // Log successful login\r\n        console.log('Login successful:', {\r\n            userId: user._id || user.id,\r\n            nickname: user.nickname,\r\n            sessionId: sessionId,\r\n            timestamp: currentDateTime\r\n        });\r\n\r\n        toast.success(`Welcome back, ${user.nickname}!`);\r\n        return response;\r\n    } catch (error) {\r\n        clearStorage();\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// ... (Continue with the rest of your API functions, following the same pattern)\r\n// Make sure to include all the functions from your original file, updating them\r\n// to use the new timestamp and user utilities\r\n\r\n// Initialize session check interval\r\nif (typeof window !== 'undefined') {\r\n    setInterval(() => {\r\n        if (isLoggedIn()) {\r\n            checkSessionExpiry();\r\n        }\r\n    }, API_CONFIG.CHECK_INTERVAL);\r\n}\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}