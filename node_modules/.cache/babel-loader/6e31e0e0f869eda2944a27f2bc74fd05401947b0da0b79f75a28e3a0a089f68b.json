{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Constants\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  SESSION_ID: 'sessionId',\n  LAST_ACTIVE: 'lastActive'\n};\n\n// Helper Functions for Dynamic Date and User\nconst getCurrentDateTime = () => {\n  const now = new Date();\n  return now.toISOString().slice(0, 19).replace('T', ' ');\n};\nconst getCurrentUser = () => {\n  const userData = localStorage.getItem(STORAGE_KEYS.USER);\n  if (!userData) return 'anonymous';\n  const user = JSON.parse(userData);\n  return user.nickname || 'anonymous';\n};\n\n// API Instance Configuration\nconst Api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Storage Management\nconst clearStorage = () => {\n  Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\n  sessionStorage.clear();\n  document.cookie.split(\";\").forEach(cookie => {\n    document.cookie = cookie.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n  });\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const userToStore = {\n    _id: userData._id || userData.id,\n    nickname: userData.nickname,\n    email: userData.email,\n    updatedAt: getCurrentDateTime(),\n    lastActive: getCurrentDateTime()\n  };\n  localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n};\n\n// Session Management\nconst checkSessionValidity = () => {\n  const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n  if (!lastActive) return false;\n  const lastActiveTime = new Date(lastActive).getTime();\n  const currentTime = new Date().getTime();\n  const sessionTimeout = 30 * 24 * 60 * 60 * 1000; // 30 days in milliseconds\n\n  return currentTime - lastActiveTime < sessionTimeout;\n};\nconst updateSessionActivity = () => {\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n};\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.metadata = {\n    startTime: new Date(),\n    requestId: Math.random().toString(36).substring(7),\n    timestamp: getCurrentDateTime(),\n    user: getCurrentUser()\n  };\n  updateSessionActivity();\n  if (!checkSessionValidity()) {\n    clearStorage();\n    window.location.href = '/login';\n    return Promise.reject('Session expired');\n  }\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Request:', {\n      url: config.url,\n      method: config.method,\n      requestId: config.metadata.requestId,\n      timestamp: config.metadata.timestamp,\n      user: config.metadata.user\n    });\n  }\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  var _response$data;\n  const requestStartTime = response.config.metadata.startTime;\n  response.duration = new Date() - requestStartTime;\n  if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.session) {\n    localStorage.setItem(STORAGE_KEYS.SESSION_ID, response.data.session.id);\n  }\n  updateSessionActivity();\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Response:', {\n      url: response.config.url,\n      status: response.status,\n      duration: response.duration,\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    });\n  }\n  return response;\n}, async error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    clearStorage();\n    window.location.href = '/login';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Auth API Functions\nexport const signupApi = async data => {\n  try {\n    const response = await Api.post('/users/signup', {\n      ...data,\n      timestamp: getCurrentDateTime()\n    });\n    toast.success('Registration successful! Please log in.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const loginApi = async data => {\n  try {\n    var _response$data2;\n    const response = await Api.post('/users/login', {\n      ...data,\n      timestamp: getCurrentDateTime()\n    });\n    if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.data) {\n      const {\n        user,\n        token,\n        session\n      } = response.data.data;\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\n      localStorage.setItem(STORAGE_KEYS.SESSION_ID, session === null || session === void 0 ? void 0 : session.id);\n      updateStoredUserData(user);\n      toast.success(`Welcome back, ${user.nickname}!`);\n    }\n    return response;\n  } catch (error) {\n    clearStorage();\n    throw handleApiError(error);\n  }\n};\nexport const logoutApi = async () => {\n  try {\n    await Api.post('/users/logout', {\n      timestamp: getCurrentDateTime(),\n      sessionId: localStorage.getItem(STORAGE_KEYS.SESSION_ID)\n    });\n  } catch (error) {\n    console.error('Logout error:', {\n      error: error.message,\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    });\n  } finally {\n    clearStorage();\n    window.location.href = '/login';\n  }\n};\n\n// API Functions with Session Management\nexport const createConfession = async confessionData => {\n  try {\n    const formData = new FormData();\n    const currentData = {\n      ...confessionData,\n      timestamp: getCurrentDateTime(),\n      author: getCurrentUser()\n    };\n    Object.entries(currentData).forEach(([key, value]) => {\n      if (key !== 'image') {\n        formData.append(key, value);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.post('/users/confessions/create', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    toast.success('Confession created successfully!');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response3, _error$response3$data, _error$response5, _error$response6;\n  const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || 'An unexpected error occurred';\n  const timestamp = getCurrentDateTime();\n  const user = getCurrentUser();\n  if (process.env.NODE_ENV === 'development') {\n    var _error$response4, _error$config, _error$config2;\n    console.error('API Error:', {\n      message: errorMessage,\n      status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n      timestamp,\n      user,\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method\n    });\n  }\n  toast.error(errorMessage);\n  return {\n    message: errorMessage,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    timestamp,\n    user,\n    data: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data\n  };\n};\n\n// Utility Functions\nexport const isLoggedIn = () => {\n  try {\n    return checkSessionValidity() && !!localStorage.getItem(STORAGE_KEYS.TOKEN);\n  } catch (error) {\n    console.error('Session check error:', {\n      error: error.message,\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    });\n    return false;\n  }\n};\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error parsing stored user data:', {\n      error: error.message,\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    });\n    return null;\n  }\n};\nexport default Api;","map":{"version":3,"names":["axios","toast","API_BASE_URL","process","env","REACT_APP_API_URL","STORAGE_KEYS","TOKEN","USER_ID","USER","SESSION_ID","LAST_ACTIVE","getCurrentDateTime","now","Date","toISOString","slice","replace","getCurrentUser","userData","localStorage","getItem","user","JSON","parse","nickname","Api","create","baseURL","withCredentials","headers","clearStorage","Object","values","forEach","key","removeItem","sessionStorage","clear","document","cookie","split","toUTCString","updateStoredUserData","userToStore","_id","id","email","updatedAt","lastActive","setItem","stringify","checkSessionValidity","lastActiveTime","getTime","currentTime","sessionTimeout","updateSessionActivity","interceptors","request","use","config","token","Authorization","metadata","startTime","requestId","Math","random","toString","substring","timestamp","window","location","href","Promise","reject","NODE_ENV","console","log","url","method","error","handleApiError","response","_response$data","requestStartTime","duration","data","session","status","_error$response","_error$response2","signupApi","post","success","loginApi","_response$data2","logoutApi","sessionId","message","createConfession","confessionData","formData","FormData","currentData","author","entries","value","append","image","_error$response3","_error$response3$data","_error$response5","_error$response6","errorMessage","_error$response4","_error$config","_error$config2","isLoggedIn","getStoredUserData"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Constants\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    SESSION_ID: 'sessionId',\r\n    LAST_ACTIVE: 'lastActive'\r\n};\r\n\r\n// Helper Functions for Dynamic Date and User\r\nconst getCurrentDateTime = () => {\r\n    const now = new Date();\r\n    return now.toISOString().slice(0, 19).replace('T', ' ');\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n    if (!userData) return 'anonymous';\r\n    const user = JSON.parse(userData);\r\n    return user.nickname || 'anonymous';\r\n};\r\n\r\n// API Instance Configuration\r\nconst Api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Storage Management\r\nconst clearStorage = () => {\r\n    Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\r\n    sessionStorage.clear();\r\n    document.cookie.split(\";\").forEach(cookie => {\r\n        document.cookie = cookie.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\r\n    });\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const userToStore = {\r\n        _id: userData._id || userData.id,\r\n        nickname: userData.nickname,\r\n        email: userData.email,\r\n        updatedAt: getCurrentDateTime(),\r\n        lastActive: getCurrentDateTime()\r\n    };\r\n    \r\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\r\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n};\r\n\r\n// Session Management\r\nconst checkSessionValidity = () => {\r\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n    if (!lastActive) return false;\r\n\r\n    const lastActiveTime = new Date(lastActive).getTime();\r\n    const currentTime = new Date().getTime();\r\n    const sessionTimeout = 30 * 24 * 60 * 60 * 1000; // 30 days in milliseconds\r\n\r\n    return (currentTime - lastActiveTime) < sessionTimeout;\r\n};\r\n\r\nconst updateSessionActivity = () => {\r\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n};\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        config.metadata = { \r\n            startTime: new Date(),\r\n            requestId: Math.random().toString(36).substring(7),\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        };\r\n\r\n        updateSessionActivity();\r\n\r\n        if (!checkSessionValidity()) {\r\n            clearStorage();\r\n            window.location.href = '/login';\r\n            return Promise.reject('Session expired');\r\n        }\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Request:', {\r\n                url: config.url,\r\n                method: config.method,\r\n                requestId: config.metadata.requestId,\r\n                timestamp: config.metadata.timestamp,\r\n                user: config.metadata.user\r\n            });\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const requestStartTime = response.config.metadata.startTime;\r\n        response.duration = new Date() - requestStartTime;\r\n\r\n        if (response.data?.session) {\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_ID, response.data.session.id);\r\n        }\r\n\r\n        updateSessionActivity();\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Response:', {\r\n                url: response.config.url,\r\n                status: response.status,\r\n                duration: response.duration,\r\n                timestamp: getCurrentDateTime(),\r\n                user: getCurrentUser()\r\n            });\r\n        }\r\n\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        if (error.response?.status === 401 || error.response?.status === 403) {\r\n            clearStorage();\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Auth API Functions\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/signup', {\r\n            ...data,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        toast.success('Registration successful! Please log in.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/login', {\r\n            ...data,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        \r\n        if (response.data?.data) {\r\n            const { user, token, session } = response.data.data;\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_ID, session?.id);\r\n            updateStoredUserData(user);\r\n\r\n            toast.success(`Welcome back, ${user.nickname}!`);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        clearStorage();\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const logoutApi = async () => {\r\n    try {\r\n        await Api.post('/users/logout', {\r\n            timestamp: getCurrentDateTime(),\r\n            sessionId: localStorage.getItem(STORAGE_KEYS.SESSION_ID)\r\n        });\r\n    } catch (error) {\r\n        console.error('Logout error:', {\r\n            error: error.message,\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        });\r\n    } finally {\r\n        clearStorage();\r\n        window.location.href = '/login';\r\n    }\r\n};\r\n\r\n// API Functions with Session Management\r\nexport const createConfession = async (confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            timestamp: getCurrentDateTime(),\r\n            author: getCurrentUser()\r\n        };\r\n\r\n        Object.entries(currentData).forEach(([key, value]) => {\r\n            if (key !== 'image') {\r\n                formData.append(key, value);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.post('/users/confessions/create', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n\r\n        toast.success('Confession created successfully!');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    const timestamp = getCurrentDateTime();\r\n    const user = getCurrentUser();\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.error('API Error:', {\r\n            message: errorMessage,\r\n            status: error.response?.status,\r\n            timestamp,\r\n            user,\r\n            url: error.config?.url,\r\n            method: error.config?.method\r\n        });\r\n    }\r\n\r\n    toast.error(errorMessage);\r\n    \r\n    return {\r\n        message: errorMessage,\r\n        status: error.response?.status,\r\n        timestamp,\r\n        user,\r\n        data: error.response?.data\r\n    };\r\n};\r\n\r\n// Utility Functions\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        return checkSessionValidity() && !!localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n    } catch (error) {\r\n        console.error('Session check error:', {\r\n            error: error.message,\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        });\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error parsing stored user data:', {\r\n            error: error.message,\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        });\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}