{"ast":null,"code":"// src/api/index.js\n\nimport axios from 'axios';\nimport { toast } from 'react-toastify'; // Install this package for notifications\n\n// Constants\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  TIMEOUT: 15000,\n  // 15 seconds\n  RETRY_ATTEMPTS: 3\n};\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive'\n};\n\n// API Instance Configuration\nconst Api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Helper Functions\nconst clearStorage = () => {\n  Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\n  sessionStorage.clear();\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  try {\n    const userToStore = {\n      _id: userData._id || userData.id,\n      nickname: userData.nickname,\n      email: userData.email,\n      updatedAt: userData.updatedAt,\n      lastActive: new Date().toISOString()\n    };\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, new Date().toISOString());\n  } catch (error) {\n    console.error('Error updating stored user data:', error);\n    throw new Error('Failed to update user data in storage');\n  }\n};\n\n// Request Interceptor with Retry Logic\nApi.interceptors.request.use(async config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Add timestamp and request ID for debugging\n  config.metadata = {\n    startTime: new Date(),\n    requestId: Math.random().toString(36).substring(7)\n  };\n  return config;\n}, error => {\n  console.error('Request Interceptor Error:', error);\n  return Promise.reject(error);\n});\n\n// Response Interceptor with Error Handling\nApi.interceptors.response.use(response => {\n  // Add response time metadata\n  const requestStartTime = response.config.metadata.startTime;\n  response.duration = new Date() - requestStartTime;\n\n  // Log successful requests for monitoring\n  console.debug(`API Call Success [${response.config.method}] ${response.config.url}`, {\n    duration: response.duration,\n    status: response.status,\n    requestId: response.config.metadata.requestId\n  });\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Handle token expiration\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);\n      if (refreshToken) {\n        const response = await Api.post('/auth/refresh-token', {\n          refreshToken\n        });\n        const {\n          token\n        } = response.data;\n        localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return Api(originalRequest);\n      }\n    } catch (refreshError) {\n      clearStorage();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Auth API Functions\nexport const signupApi = async data => {\n  try {\n    const response = await Api.post('/users/signup', data);\n    toast.success('Registration successful! Please log in.');\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n    throw handleApiError(error);\n  }\n};\nexport const loginApi = async data => {\n  try {\n    var _response$data;\n    const response = await Api.post('/users/login', data);\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.data) {\n      const {\n        user,\n        token,\n        refreshToken\n      } = response.data.data;\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN, refreshToken);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\n      updateStoredUserData(user);\n      toast.success(`Welcome back, ${user.nickname}!`);\n    } else {\n      throw new Error('Invalid response format from server');\n    }\n    return response.data;\n  } catch (error) {\n    clearStorage();\n    toast.error(error.message);\n    throw handleApiError(error);\n  }\n};\n\n// Profile API Functions\nexport const getUserProfile = async () => {\n  try {\n    var _response$data2;\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) throw new Error('User ID not found. Please login again.');\n    const response = await Api.get(`/users/profile/${userId}`);\n    if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.data) {\n      updateStoredUserData(response.data.data);\n    }\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n    throw handleApiError(error);\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    var _response$data3;\n    const response = await Api.put('/users/profile/update', userData);\n    if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success) {\n      updateStoredUserData(response.data.user);\n      toast.success('Profile updated successfully!');\n    }\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n    throw handleApiError(error);\n  }\n};\n\n// Confession API Functions with Rate Limiting and Caching\nconst confessionCache = new Map();\nexport const createConfession = async confessionData => {\n  try {\n    const formData = new FormData();\n    Object.entries(confessionData).forEach(([key, value]) => {\n      if (key !== 'image' || key === 'image' && value) {\n        formData.append(key, value);\n      }\n    });\n    const response = await Api.post('/confessions/create', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    toast.success('Confession created successfully!');\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n    throw handleApiError(error);\n  }\n};\nexport const getAllConfessions = async (page = 1, limit = 10, useCache = true) => {\n  const cacheKey = `confessions_${page}_${limit}`;\n  try {\n    // Check cache first\n    if (useCache && confessionCache.has(cacheKey)) {\n      const cachedData = confessionCache.get(cacheKey);\n      if (new Date() - cachedData.timestamp < 5 * 60 * 1000) {\n        // 5 minutes cache\n        return cachedData.data;\n      }\n    }\n    const response = await Api.get(`/confessions?page=${page}&limit=${limit}`);\n\n    // Update cache\n    if (useCache) {\n      confessionCache.set(cacheKey, {\n        data: response.data,\n        timestamp: new Date()\n      });\n    }\n    return response.data;\n  } catch (error) {\n    toast.error(error.message);\n    throw handleApiError(error);\n  }\n};\n\n// Utility Functions\nexport const isLoggedIn = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n    if (!token || !userId) return false;\n\n    // Check if session is expired (24 hours)\n    if (lastActive) {\n      const lastActiveTime = new Date(lastActive).getTime();\n      const currentTime = new Date().getTime();\n      const sessionDuration = currentTime - lastActiveTime;\n      if (sessionDuration > 24 * 60 * 60 * 1000) {\n        clearStorage();\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Error checking auth status:', error);\n    return false;\n  }\n};\n\n// Error Handler with Detailed Logging\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response3, _error$config, _error$config2, _error$config3, _error$config3$metada, _error$response4;\n  const errorDetails = {\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n    endpoint: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n    timestamp: new Date().toISOString(),\n    user: localStorage.getItem(STORAGE_KEYS.USER_ID),\n    requestId: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : (_error$config3$metada = _error$config3.metadata) === null || _error$config3$metada === void 0 ? void 0 : _error$config3$metada.requestId\n  };\n\n  // Log error for debugging\n  console.error('API Error:', errorDetails);\n\n  // Return formatted error\n  return {\n    message: errorDetails.message || 'An unexpected error occurred',\n    status: errorDetails.status,\n    data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n    originalError: error,\n    ...errorDetails\n  };\n};\nexport const logout = () => {\n  try {\n    // Attempt to notify server of logout\n    Api.post('/users/logout').finally(() => {\n      clearStorage();\n      window.location.href = '/login';\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    clearStorage();\n    window.location.href = '/login';\n  }\n};\nexport default Api;","map":{"version":3,"names":["axios","toast","API_CONFIG","BASE_URL","process","env","REACT_APP_API_URL","TIMEOUT","RETRY_ATTEMPTS","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","Api","create","baseURL","timeout","withCredentials","headers","clearStorage","Object","values","forEach","key","localStorage","removeItem","sessionStorage","clear","updateStoredUserData","userData","userToStore","_id","id","nickname","email","updatedAt","lastActive","Date","toISOString","setItem","JSON","stringify","error","console","Error","interceptors","request","use","config","token","getItem","Authorization","metadata","startTime","requestId","Math","random","toString","substring","Promise","reject","response","requestStartTime","duration","debug","method","url","status","_error$response","originalRequest","_retry","refreshToken","post","data","refreshError","window","location","href","handleApiError","signupApi","success","message","loginApi","_response$data","user","getUserProfile","_response$data2","userId","get","updateUserProfile","_response$data3","put","confessionCache","Map","createConfession","confessionData","formData","FormData","entries","value","append","getAllConfessions","page","limit","useCache","cacheKey","has","cachedData","timestamp","set","isLoggedIn","lastActiveTime","getTime","currentTime","sessionDuration","_error$response2","_error$response2$data","_error$response3","_error$config","_error$config2","_error$config3","_error$config3$metada","_error$response4","errorDetails","endpoint","originalError","logout","finally"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["// src/api/index.js\r\n\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify'; // Install this package for notifications\r\n\r\n// Constants\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: 15000, // 15 seconds\r\n    RETRY_ATTEMPTS: 3\r\n};\r\n\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive'\r\n};\r\n\r\n// API Instance Configuration\r\nconst Api = axios.create({\r\n    baseURL: API_CONFIG.BASE_URL,\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Helper Functions\r\nconst clearStorage = () => {\r\n    Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\r\n    sessionStorage.clear();\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    try {\r\n        const userToStore = {\r\n            _id: userData._id || userData.id,\r\n            nickname: userData.nickname,\r\n            email: userData.email,\r\n            updatedAt: userData.updatedAt,\r\n            lastActive: new Date().toISOString()\r\n        };\r\n        \r\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, new Date().toISOString());\r\n    } catch (error) {\r\n        console.error('Error updating stored user data:', error);\r\n        throw new Error('Failed to update user data in storage');\r\n    }\r\n};\r\n\r\n// Request Interceptor with Retry Logic\r\nApi.interceptors.request.use(\r\n    async (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        \r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        // Add timestamp and request ID for debugging\r\n        config.metadata = { \r\n            startTime: new Date(),\r\n            requestId: Math.random().toString(36).substring(7)\r\n        };\r\n\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request Interceptor Error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response Interceptor with Error Handling\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        // Add response time metadata\r\n        const requestStartTime = response.config.metadata.startTime;\r\n        response.duration = new Date() - requestStartTime;\r\n\r\n        // Log successful requests for monitoring\r\n        console.debug(`API Call Success [${response.config.method}] ${response.config.url}`, {\r\n            duration: response.duration,\r\n            status: response.status,\r\n            requestId: response.config.metadata.requestId\r\n        });\r\n\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // Handle token expiration\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n            try {\r\n                const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);\r\n                if (refreshToken) {\r\n                    const response = await Api.post('/auth/refresh-token', { refreshToken });\r\n                    const { token } = response.data;\r\n                    localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n                    originalRequest.headers.Authorization = `Bearer ${token}`;\r\n                    return Api(originalRequest);\r\n                }\r\n            } catch (refreshError) {\r\n                clearStorage();\r\n                window.location.href = '/login';\r\n                return Promise.reject(refreshError);\r\n            }\r\n        }\r\n\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Auth API Functions\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/signup', data);\r\n        toast.success('Registration successful! Please log in.');\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error(error.message);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/login', data);\r\n        \r\n        if (response.data?.data) {\r\n            const { user, token, refreshToken } = response.data.data;\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN, refreshToken);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\r\n            updateStoredUserData(user);\r\n\r\n            toast.success(`Welcome back, ${user.nickname}!`);\r\n        } else {\r\n            throw new Error('Invalid response format from server');\r\n        }\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        clearStorage();\r\n        toast.error(error.message);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Profile API Functions\r\nexport const getUserProfile = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        if (!userId) throw new Error('User ID not found. Please login again.');\r\n\r\n        const response = await Api.get(`/users/profile/${userId}`);\r\n        if (response.data?.data) {\r\n            updateStoredUserData(response.data.data);\r\n        }\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error(error.message);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateUserProfile = async (userData) => {\r\n    try {\r\n        const response = await Api.put('/users/profile/update', userData);\r\n        if (response.data?.success) {\r\n            updateStoredUserData(response.data.user);\r\n            toast.success('Profile updated successfully!');\r\n        }\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error(error.message);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Confession API Functions with Rate Limiting and Caching\r\nconst confessionCache = new Map();\r\n\r\nexport const createConfession = async (confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        \r\n        Object.entries(confessionData).forEach(([key, value]) => {\r\n            if (key !== 'image' || (key === 'image' && value)) {\r\n                formData.append(key, value);\r\n            }\r\n        });\r\n\r\n        const response = await Api.post('/confessions/create', formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n        \r\n        toast.success('Confession created successfully!');\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error(error.message);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getAllConfessions = async (page = 1, limit = 10, useCache = true) => {\r\n    const cacheKey = `confessions_${page}_${limit}`;\r\n    \r\n    try {\r\n        // Check cache first\r\n        if (useCache && confessionCache.has(cacheKey)) {\r\n            const cachedData = confessionCache.get(cacheKey);\r\n            if (new Date() - cachedData.timestamp < 5 * 60 * 1000) { // 5 minutes cache\r\n                return cachedData.data;\r\n            }\r\n        }\r\n\r\n        const response = await Api.get(`/confessions?page=${page}&limit=${limit}`);\r\n        \r\n        // Update cache\r\n        if (useCache) {\r\n            confessionCache.set(cacheKey, {\r\n                data: response.data,\r\n                timestamp: new Date()\r\n            });\r\n        }\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        toast.error(error.message);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Utility Functions\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n\r\n        if (!token || !userId) return false;\r\n\r\n        // Check if session is expired (24 hours)\r\n        if (lastActive) {\r\n            const lastActiveTime = new Date(lastActive).getTime();\r\n            const currentTime = new Date().getTime();\r\n            const sessionDuration = currentTime - lastActiveTime;\r\n            \r\n            if (sessionDuration > 24 * 60 * 60 * 1000) {\r\n                clearStorage();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error checking auth status:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// Error Handler with Detailed Logging\r\nconst handleApiError = (error) => {\r\n    const errorDetails = {\r\n        message: error.response?.data?.message || error.message,\r\n        status: error.response?.status,\r\n        endpoint: error.config?.url,\r\n        method: error.config?.method,\r\n        timestamp: new Date().toISOString(),\r\n        user: localStorage.getItem(STORAGE_KEYS.USER_ID),\r\n        requestId: error.config?.metadata?.requestId\r\n    };\r\n\r\n    // Log error for debugging\r\n    console.error('API Error:', errorDetails);\r\n\r\n    // Return formatted error\r\n    return {\r\n        message: errorDetails.message || 'An unexpected error occurred',\r\n        status: errorDetails.status,\r\n        data: error.response?.data,\r\n        originalError: error,\r\n        ...errorDetails\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    try {\r\n        // Attempt to notify server of logout\r\n        Api.post('/users/logout').finally(() => {\r\n            clearStorage();\r\n            window.location.href = '/login';\r\n        });\r\n    } catch (error) {\r\n        console.error('Logout error:', error);\r\n        clearStorage();\r\n        window.location.href = '/login';\r\n    }\r\n};\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}