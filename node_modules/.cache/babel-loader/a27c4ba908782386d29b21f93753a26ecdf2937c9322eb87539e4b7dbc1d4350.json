{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar feedback, scoring;\nscoring = require('./scoring');\nfeedback = {\n  default_feedback: {\n    warning: '',\n    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n  },\n  get_feedback: function (score, sequence) {\n    var extra_feedback, i, len, longest_match, match, ref;\n    if (sequence.length === 0) {\n      return this.default_feedback;\n    }\n    if (score > 2) {\n      return {\n        warning: '',\n        suggestions: []\n      };\n    }\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = 'Add another word or two. Uncommon words are better.';\n    if (feedback != null) {\n      feedback.suggestions.unshift(extra_feedback);\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extra_feedback]\n      };\n    }\n    return feedback;\n  },\n  get_match_feedback: function (match, is_sole_match) {\n    var layout, warning;\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n      case 'spatial':\n        layout = match.graph.toUpperCase();\n        warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n        return {\n          warning: warning,\n          suggestions: ['Use a longer keyboard pattern with more turns']\n        };\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n        return {\n          warning: warning,\n          suggestions: ['Avoid repeated words and characters']\n        };\n      case 'sequence':\n        return {\n          warning: \"Sequences like abc or 6543 are easy to guess\",\n          suggestions: ['Avoid sequences']\n        };\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: \"Recent years are easy to guess\",\n            suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n          };\n        }\n        break;\n      case 'date':\n        return {\n          warning: \"Dates are often easy to guess\",\n          suggestions: ['Avoid dates and years that are associated with you']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function (match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n    suggestions = [];\n    word = match.token;\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push(\"Capitalization doesn't help very much\");\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n    }\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push(\"Reversed words aren't much harder to guess\");\n    }\n    if (match.l33t) {\n      suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n    }\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  }\n};\nmodule.exports = feedback;","map":{"version":3,"names":["feedback","scoring","require","default_feedback","warning","suggestions","get_feedback","score","sequence","extra_feedback","i","len","longest_match","match","ref","length","slice","token","get_match_feedback","unshift","is_sole_match","layout","pattern","get_dictionary_match_feedback","graph","toUpperCase","turns","base_token","regex_name","result","word","dictionary_name","l33t","reversed","rank","guesses_log10","START_UPPER","push","ALL_UPPER","toLowerCase","module","exports"],"sources":["C:\\uiux development\\frontend\\confessapp\\node_modules\\zxcvbn\\src\\feedback.coffee"],"sourcesContent":["scoring = require('./scoring')\n\nfeedback =\n  default_feedback:\n    warning: ''\n    suggestions: [\n      \"Use a few words, avoid common phrases\"\n      \"No need for symbols, digits, or uppercase letters\"\n    ]\n\n  get_feedback: (score, sequence) ->\n    # starting feedback\n    return @default_feedback if sequence.length == 0\n\n    # no feedback if score is good or great.\n    return if score > 2\n      warning: ''\n      suggestions: []\n\n    # tie feedback to the longest match for longer sequences\n    longest_match = sequence[0]\n    for match in sequence[1..]\n      longest_match = match if match.token.length > longest_match.token.length\n    feedback = @get_match_feedback(longest_match, sequence.length == 1)\n    extra_feedback = 'Add another word or two. Uncommon words are better.'\n    if feedback?\n      feedback.suggestions.unshift extra_feedback\n      feedback.warning = '' unless feedback.warning?\n    else\n      feedback =\n        warning: ''\n        suggestions: [extra_feedback]\n    feedback\n\n  get_match_feedback: (match, is_sole_match) ->\n    switch match.pattern\n      when 'dictionary'\n        @get_dictionary_match_feedback match, is_sole_match\n\n      when 'spatial'\n        layout = match.graph.toUpperCase()\n        warning = if match.turns == 1\n          'Straight rows of keys are easy to guess'\n        else\n          'Short keyboard patterns are easy to guess'\n        warning: warning\n        suggestions: [\n          'Use a longer keyboard pattern with more turns'\n        ]\n\n      when 'repeat'\n        warning = if match.base_token.length == 1\n          'Repeats like \"aaa\" are easy to guess'\n        else\n          'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"'\n        warning: warning\n        suggestions: [\n          'Avoid repeated words and characters'\n        ]\n\n      when 'sequence'\n        warning: \"Sequences like abc or 6543 are easy to guess\"\n        suggestions: [\n          'Avoid sequences'\n        ]\n\n      when 'regex'\n        if match.regex_name == 'recent_year'\n          warning: \"Recent years are easy to guess\"\n          suggestions: [\n            'Avoid recent years'\n            'Avoid years that are associated with you'\n          ]\n\n      when 'date'\n        warning: \"Dates are often easy to guess\"\n        suggestions: [\n          'Avoid dates and years that are associated with you'\n        ]\n\n  get_dictionary_match_feedback: (match, is_sole_match) ->\n    warning = if match.dictionary_name == 'passwords'\n      if is_sole_match and not match.l33t and not match.reversed\n        if match.rank <= 10\n          'This is a top-10 common password'\n        else if match.rank <= 100\n          'This is a top-100 common password'\n        else\n          'This is a very common password'\n      else if match.guesses_log10 <= 4\n        'This is similar to a commonly used password'\n    else if match.dictionary_name == 'english_wikipedia'\n      if is_sole_match\n        'A word by itself is easy to guess'\n    else if match.dictionary_name in ['surnames', 'male_names', 'female_names']\n      if is_sole_match\n        'Names and surnames by themselves are easy to guess'\n      else\n        'Common names and surnames are easy to guess'\n    else\n      ''\n\n    suggestions = []\n    word = match.token\n    if word.match(scoring.START_UPPER)\n      suggestions.push \"Capitalization doesn't help very much\"\n    else if word.match(scoring.ALL_UPPER) and word.toLowerCase() != word\n      suggestions.push \"All-uppercase is almost as easy to guess as all-lowercase\"\n\n    if match.reversed and match.token.length >= 4\n      suggestions.push \"Reversed words aren't much harder to guess\"\n    if match.l33t\n      suggestions.push \"Predictable substitutions like '@' instead of 'a' don't help very much\"\n\n    result =\n      warning: warning\n      suggestions: suggestions\n    result\n\nmodule.exports = feedback\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}