{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Constants\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive'\n};\n\n// Helper Functions for Dynamic Date and User\nconst getCurrentDateTime = () => {\n  const now = new Date();\n  return now.toISOString().slice(0, 19).replace('T', ' ');\n};\nconst getCurrentUser = () => {\n  const userData = localStorage.getItem(STORAGE_KEYS.USER);\n  if (!userData) return 'anonymous';\n  const user = JSON.parse(userData);\n  return user.nickname || 'anonymous';\n};\n\n// API Instance Configuration\nconst Api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Accept': 'application/json'\n  }\n});\n\n// Helper Functions\nconst clearStorage = () => {\n  Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\n  sessionStorage.clear();\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const userToStore = {\n    _id: userData._id || userData.id,\n    nickname: userData.nickname,\n    email: userData.email,\n    updatedAt: userData.updatedAt,\n    lastActive: getCurrentDateTime()\n  };\n  localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n};\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Add metadata for request logging\n  config.metadata = {\n    startTime: new Date(),\n    requestId: Math.random().toString(36).substring(7)\n  };\n\n  // Conditionally set Content-Type header\n  if (config.data instanceof FormData) {\n    delete config.headers['Content-Type'];\n  } else {\n    config.headers['Content-Type'] = 'application/json';\n  }\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Request:', {\n      url: config.url,\n      method: config.method,\n      requestId: config.metadata.requestId,\n      headers: config.headers\n    });\n  }\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const requestStartTime = response.config.metadata.startTime;\n  response.duration = new Date() - requestStartTime;\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Response:', {\n      url: response.config.url,\n      status: response.status,\n      duration: response.duration,\n      requestId: response.config.metadata.requestId\n    });\n  }\n  return response;\n}, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage();\n    window.location.href = '/login';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Auth API Functions\nexport const signupApi = async data => {\n  try {\n    const response = await Api.post('/users/signup', data);\n    toast.success('Registration successful! Please log in.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const loginApi = async data => {\n  try {\n    var _response$data;\n    const response = await Api.post('/users/login', data);\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.data) {\n      const {\n        user,\n        token\n      } = response.data.data;\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\n      updateStoredUserData(user);\n      toast.success(`Welcome back, ${user.nickname}!`);\n    }\n    return response;\n  } catch (error) {\n    clearStorage();\n    throw handleApiError(error);\n  }\n};\n\n// Profile API Functions\nexport const getUserProfile = async () => {\n  try {\n    var _response$data2;\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) throw new Error('User ID not found. Please login again.');\n    const response = await Api.get(`/users/profile/${userId}`);\n    if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.data) {\n      updateStoredUserData(response.data.data);\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    var _response$data3;\n    const response = await Api.put('/users/profile/update', userData);\n    if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success) {\n      updateStoredUserData(response.data.user);\n      toast.success('Profile updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const changePassword = async passwordData => {\n  try {\n    var _response$data4;\n    const response = await Api.put('/users/change-password', passwordData);\n    if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) {\n      toast.success('Password changed successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n// Confession API Functions\nexport const createConfession = async confessionData => {\n  try {\n    // Validate required fields\n    const requiredFields = ['title', 'content', 'category'];\n    for (const field of requiredFields) {\n      if (!confessionData[field]) {\n        throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n      }\n    }\n    const formData = new FormData();\n\n    // Add current user and timestamp dynamically\n    const currentData = {\n      ...confessionData,\n      author: getCurrentUser(),\n      timestamp: getCurrentDateTime()\n    };\n\n    // Append text data\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Creating confession:', {\n        ...currentData,\n        image: confessionData.image ? 'Image file present' : 'No image'\n      });\n    }\n    const response = await Api.post('users/confessions/create', formData);\n    return response;\n  } catch (error) {\n    console.error('Error in createConfession:', error);\n    throw handleApiError(error);\n  }\n};\nexport const getAllConfessions = async (page = 1, limit = 10) => {\n  try {\n    const response = await Api.get(`users/confessions/all?page=${page}&limit=${limit}`);\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserConfessions = async () => {\n  try {\n    const response = await Api.get('users/confessions/my');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateConfession = async (id, confessionData) => {\n  try {\n    var _response$data5;\n    const formData = new FormData();\n    const currentData = {\n      ...confessionData,\n      updatedAt: getCurrentDateTime()\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.put(`users/confessions/${id}`, formData);\n    if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.success) {\n      toast.success('Confession updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const deleteConfession = async id => {\n  try {\n    var _response$data6;\n    const response = await Api.delete(`users/confessions/${id}`);\n    if ((_response$data6 = response.data) !== null && _response$data6 !== void 0 && _response$data6.success) {\n      toast.success('Confession deleted successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n// Utility Functions\nexport const isLoggedIn = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n    if (!token || !userId) return false;\n    if (lastActive) {\n      const lastActiveTime = new Date(lastActive).getTime();\n      const currentTime = new Date().getTime();\n      const sessionDuration = currentTime - lastActiveTime;\n      if (sessionDuration > 24 * 60 * 60 * 1000) {\n        // 24 hours\n        clearStorage();\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Error checking auth status:', error);\n    return false;\n  }\n};\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error parsing stored user data:', error);\n    return null;\n  }\n};\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response5, _error$response6;\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n  if (process.env.NODE_ENV === 'development') {\n    var _error$response3, _error$response4, _error$config, _error$config2;\n    console.error('API Error:', {\n      message: errorMessage,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method\n    });\n  }\n  toast.error(errorMessage);\n  return {\n    message: errorMessage,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    data: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n    originalError: error\n  };\n};\nexport const logout = () => {\n  try {\n    Api.post('/users/logout').finally(() => {\n      clearStorage();\n      window.location.href = '/login';\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    clearStorage();\n    window.location.href = '/login';\n  }\n};\nexport default Api;","map":{"version":3,"names":["axios","toast","API_BASE_URL","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","getCurrentDateTime","now","Date","toISOString","slice","replace","getCurrentUser","userData","localStorage","getItem","user","JSON","parse","nickname","Api","create","baseURL","withCredentials","headers","clearStorage","Object","values","forEach","key","removeItem","sessionStorage","clear","updateStoredUserData","userToStore","_id","id","email","updatedAt","lastActive","setItem","stringify","interceptors","request","use","config","token","Authorization","metadata","startTime","requestId","Math","random","toString","substring","data","FormData","process","env","NODE_ENV","console","log","url","method","error","Promise","reject","handleApiError","response","requestStartTime","duration","status","_error$response","window","location","href","signupApi","post","success","loginApi","_response$data","getUserProfile","_response$data2","userId","Error","get","updateUserProfile","_response$data3","put","changePassword","passwordData","_response$data4","createConfession","confessionData","requiredFields","field","charAt","toUpperCase","formData","currentData","author","timestamp","keys","append","image","getAllConfessions","page","limit","getUserConfessions","updateConfession","_response$data5","deleteConfession","_response$data6","delete","isLoggedIn","lastActiveTime","getTime","currentTime","sessionDuration","getStoredUserData","_error$response2","_error$response2$data","_error$response5","_error$response6","errorMessage","message","_error$response3","_error$response4","_error$config","_error$config2","originalError","logout","finally"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Constants\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive'\r\n};\r\n\r\n// Helper Functions for Dynamic Date and User\r\nconst getCurrentDateTime = () => {\r\n    const now = new Date();\r\n    return now.toISOString().slice(0, 19).replace('T', ' ');\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n    if (!userData) return 'anonymous';\r\n    const user = JSON.parse(userData);\r\n    return user.nickname || 'anonymous';\r\n};\r\n\r\n// API Instance Configuration\r\nconst Api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Helper Functions\r\nconst clearStorage = () => {\r\n    Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\r\n    sessionStorage.clear();\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const userToStore = {\r\n        _id: userData._id || userData.id,\r\n        nickname: userData.nickname,\r\n        email: userData.email,\r\n        updatedAt: userData.updatedAt,\r\n        lastActive: getCurrentDateTime()\r\n    };\r\n    \r\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\r\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n};\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        // Add metadata for request logging\r\n        config.metadata = { \r\n            startTime: new Date(),\r\n            requestId: Math.random().toString(36).substring(7)\r\n        };\r\n\r\n        // Conditionally set Content-Type header\r\n        if (config.data instanceof FormData) {\r\n            delete config.headers['Content-Type'];\r\n        } else {\r\n            config.headers['Content-Type'] = 'application/json';\r\n        }\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Request:', {\r\n                url: config.url,\r\n                method: config.method,\r\n                requestId: config.metadata.requestId,\r\n                headers: config.headers\r\n            });\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const requestStartTime = response.config.metadata.startTime;\r\n        response.duration = new Date() - requestStartTime;\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Response:', {\r\n                url: response.config.url,\r\n                status: response.status,\r\n                duration: response.duration,\r\n                requestId: response.config.metadata.requestId\r\n            });\r\n        }\r\n\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        if (error.response?.status === 401) {\r\n            clearStorage();\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Auth API Functions\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/signup', data);\r\n        toast.success('Registration successful! Please log in.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/login', data);\r\n        \r\n        if (response.data?.data) {\r\n            const { user, token } = response.data.data;\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\r\n            updateStoredUserData(user);\r\n\r\n            toast.success(`Welcome back, ${user.nickname}!`);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        clearStorage();\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Profile API Functions\r\nexport const getUserProfile = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        if (!userId) throw new Error('User ID not found. Please login again.');\r\n\r\n        const response = await Api.get(`/users/profile/${userId}`);\r\n        if (response.data?.data) {\r\n            updateStoredUserData(response.data.data);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateUserProfile = async (userData) => {\r\n    try {\r\n        const response = await Api.put('/users/profile/update', userData);\r\n        if (response.data?.success) {\r\n            updateStoredUserData(response.data.user);\r\n            toast.success('Profile updated successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const changePassword = async (passwordData) => {\r\n    try {\r\n        const response = await Api.put('/users/change-password', passwordData);\r\n        if (response.data?.success) {\r\n            toast.success('Password changed successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Confession API Functions\r\nexport const createConfession = async (confessionData) => {\r\n    try {\r\n        // Validate required fields\r\n        const requiredFields = ['title', 'content', 'category'];\r\n        for (const field of requiredFields) {\r\n            if (!confessionData[field]) {\r\n                throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\r\n            }\r\n        }\r\n\r\n        const formData = new FormData();\r\n        \r\n        // Add current user and timestamp dynamically\r\n        const currentData = {\r\n            ...confessionData,\r\n            author: getCurrentUser(),\r\n            timestamp: getCurrentDateTime()\r\n        };\r\n\r\n        // Append text data\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('Creating confession:', {\r\n                ...currentData,\r\n                image: confessionData.image ? 'Image file present' : 'No image'\r\n            });\r\n        }\r\n\r\n        const response = await Api.post('users/confessions/create', formData);\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error in createConfession:', error);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getAllConfessions = async (page = 1, limit = 10) => {\r\n    try {\r\n        const response = await Api.get(`users/confessions/all?page=${page}&limit=${limit}`);\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserConfessions = async () => {\r\n    try {\r\n        const response = await Api.get('users/confessions/my');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateConfession = async (id, confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            updatedAt: getCurrentDateTime()\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.put(`users/confessions/${id}`, formData);\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession updated successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const deleteConfession = async (id) => {\r\n    try {\r\n        const response = await Api.delete(`users/confessions/${id}`);\r\n        if (response.data?.success) {\r\n            toast.success('Confession deleted successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\n// Utility Functions\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n\r\n        if (!token || !userId) return false;\r\n\r\n        if (lastActive) {\r\n            const lastActiveTime = new Date(lastActive).getTime();\r\n            const currentTime = new Date().getTime();\r\n            const sessionDuration = currentTime - lastActiveTime;\r\n            \r\n            if (sessionDuration > 24 * 60 * 60 * 1000) { // 24 hours\r\n                clearStorage();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error checking auth status:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error parsing stored user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.error('API Error:', {\r\n            message: errorMessage,\r\n            status: error.response?.status,\r\n            data: error.response?.data,\r\n            url: error.config?.url,\r\n            method: error.config?.method\r\n        });\r\n    }\r\n\r\n    toast.error(errorMessage);\r\n    \r\n    return {\r\n        message: errorMessage,\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        originalError: error\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    try {\r\n        Api.post('/users/logout').finally(() => {\r\n            clearStorage();\r\n            window.location.href = '/login';\r\n        });\r\n    } catch (error) {\r\n        console.error('Logout error:', error);\r\n        clearStorage();\r\n        window.location.href = '/login';\r\n    }\r\n};\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}