{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Configuration Constants\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\n  WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\n  CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\n};\n\n// Storage Keys\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_ID: 'sessionId',\n  SESSION_START: 'sessionStart',\n  SESSION_WARNING_SHOWN: 'sessionWarningShown',\n  REMEMBER_ME: 'rememberMe',\n  LOGIN_IN_PROGRESS: 'loginInProgress'\n};\n\n// Utility Functions\nconst getCurrentUTCDateTime = () => {\n  const now = new Date();\n  const year = now.getUTCFullYear();\n  const month = String(now.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(now.getUTCDate()).padStart(2, '0');\n  const hours = String(now.getUTCHours()).padStart(2, '0');\n  const minutes = String(now.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(now.getUTCSeconds()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n};\nconst getSystemInfo = () => {\n  const userData = getStoredUserData();\n  return {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    language: navigator.language,\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    screenResolution: `${window.screen.width}x${window.screen.height}`,\n    timestamp: getCurrentUTCDateTime(),\n    currentUser: (userData === null || userData === void 0 ? void 0 : userData.nickname) || null\n  };\n};\nconst clearStorage = (preserveRememberMe = false) => {\n  const isLoginInProgress = localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\n  if (isLoginInProgress) return;\n  const rememberedSettings = {};\n  if (preserveRememberMe) {\n    rememberedSettings.rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME);\n    rememberedSettings.rememberedEmail = localStorage.getItem('rememberedEmail');\n  }\n  localStorage.clear();\n  sessionStorage.clear();\n  if (preserveRememberMe) {\n    Object.entries(rememberedSettings).forEach(([key, value]) => {\n      if (value) localStorage.setItem(key, value);\n    });\n  }\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const currentDateTime = getCurrentUTCDateTime();\n  const storedUser = {\n    ...userData,\n    lastActive: currentDateTime,\n    lastUpdated: currentDateTime,\n    systemInfo: getSystemInfo()\n  };\n  try {\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  } catch (error) {\n    console.error('Error updating user data:', error);\n    throw new Error('Failed to update user data');\n  }\n};\nconst checkSessionExpiry = () => {\n  if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\n    return false;\n  }\n  const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n  if (!lastActive) return true;\n  const currentTime = new Date().getTime();\n  const lastActiveTime = new Date(lastActive).getTime();\n  const timeDifference = currentTime - lastActiveTime;\n  if (timeDifference > API_CONFIG.WARNING_TIME && !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\n    toast.warning('Your session will expire soon. Please save your work.', {\n      toastId: 'session-warning'\n    });\n    localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\n  }\n  return timeDifference > API_CONFIG.SESSION_TIMEOUT;\n};\n\n// API Instance\nconst Api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  const currentDateTime = getCurrentUTCDateTime();\n  if (!config.url.includes('/login') && checkSessionExpiry()) {\n    clearStorage(true);\n    window.location.href = '/login?session=expired';\n    return Promise.reject('Session expired');\n  }\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.metadata = {\n    startTime: new Date().getTime(),\n    requestId: Math.random().toString(36).substring(7),\n    timestamp: currentDateTime,\n    systemInfo: getSystemInfo()\n  };\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const currentDateTime = getCurrentUTCDateTime();\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n  return {\n    ...response,\n    timestamp: currentDateTime,\n    duration: new Date().getTime() - response.config.metadata.startTime\n  };\n}, error => {\n  var _error$response;\n  if (!error.config.url.includes('/login') && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage(true);\n    window.location.href = '/login?session=expired';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response3, _error$response4;\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n  const currentDateTime = getCurrentUTCDateTime();\n  const userData = getStoredUserData();\n  console.error('API Error:', {\n    message: errorMessage,\n    timestamp: currentDateTime,\n    currentUser: userData === null || userData === void 0 ? void 0 : userData.nickname,\n    error: error\n  });\n  if (!error.config.url.includes('/login')) {\n    toast.error(errorMessage);\n  }\n  return {\n    message: errorMessage,\n    timestamp: currentDateTime,\n    status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n    data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data\n  };\n};\n\n// API Functions\nexport const loginApi = async data => {\n  try {\n    var _response$data;\n    localStorage.setItem(STORAGE_KEYS.LOGIN_IN_PROGRESS, 'true');\n    const currentDateTime = getCurrentUTCDateTime();\n    const loginData = {\n      ...data,\n      timestamp: currentDateTime,\n      systemInfo: getSystemInfo()\n    };\n    const response = await Api.post('/users/login', loginData);\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) {\n      const {\n        user,\n        token\n      } = response.data.data;\n      const sessionId = Math.random().toString(36).substring(7);\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\n      localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\n      localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\n      localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\n      updateStoredUserData({\n        ...user,\n        sessionId,\n        lastLogin: currentDateTime\n      });\n      console.log('Login successful:', {\n        userId: user._id,\n        nickname: user.nickname,\n        sessionId,\n        timestamp: currentDateTime\n      });\n    }\n    localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\n    return response;\n  } catch (error) {\n    localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\n    throw handleApiError(error);\n  }\n};\nexport const isLoggedIn = () => {\n  try {\n    if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\n      return false;\n    }\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n    if (!token || !userId) return false;\n    if (lastActive) {\n      const lastActiveTime = new Date(lastActive).getTime();\n      const currentTime = new Date().getTime();\n      if (currentTime - lastActiveTime > API_CONFIG.SESSION_TIMEOUT) {\n        clearStorage(true);\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Auth check error:', error);\n    return false;\n  }\n};\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error getting user data:', error);\n    return null;\n  }\n};\n\n// Rest of your API functions remain the same...\n\n// Initialize session checker\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    if (isLoggedIn() && !localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\n      if (checkSessionExpiry()) {\n        console.log('Session expired at:', getCurrentUTCDateTime());\n        clearStorage(true);\n        window.location.href = '/login?session=expired';\n      }\n    }\n  }, API_CONFIG.CHECK_INTERVAL);\n}\nexport default Api;","map":{"version":3,"names":["axios","toast","API_CONFIG","BASE_URL","process","env","REACT_APP_API_BASE_URL","TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","SESSION_TIMEOUT","REACT_APP_SESSION_TIMEOUT","WARNING_TIME","REACT_APP_WARNING_TIME","CHECK_INTERVAL","REACT_APP_CHECK_INTERVAL","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","SESSION_ID","SESSION_START","SESSION_WARNING_SHOWN","REMEMBER_ME","LOGIN_IN_PROGRESS","getCurrentUTCDateTime","now","Date","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","getSystemInfo","userData","getStoredUserData","userAgent","navigator","platform","language","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","screenResolution","window","screen","width","height","timestamp","currentUser","nickname","clearStorage","preserveRememberMe","isLoginInProgress","localStorage","getItem","rememberedSettings","rememberMe","rememberedEmail","clear","sessionStorage","Object","entries","forEach","key","value","setItem","updateStoredUserData","currentDateTime","storedUser","lastActive","lastUpdated","systemInfo","JSON","stringify","error","console","Error","checkSessionExpiry","currentTime","getTime","lastActiveTime","timeDifference","warning","toastId","Api","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","url","includes","location","href","Promise","reject","Authorization","metadata","startTime","requestId","Math","random","toString","substring","handleApiError","response","duration","_error$response","status","_error$response2","_error$response2$data","_error$response3","_error$response4","errorMessage","data","message","loginApi","_response$data","loginData","post","success","user","sessionId","_id","lastLogin","log","userId","removeItem","isLoggedIn","parse","setInterval"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Configuration Constants\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\r\n    SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\r\n    WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\r\n    CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\r\n};\r\n\r\n// Storage Keys\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_ID: 'sessionId',\r\n    SESSION_START: 'sessionStart',\r\n    SESSION_WARNING_SHOWN: 'sessionWarningShown',\r\n    REMEMBER_ME: 'rememberMe',\r\n    LOGIN_IN_PROGRESS: 'loginInProgress'\r\n};\r\n\r\n// Utility Functions\r\nconst getCurrentUTCDateTime = () => {\r\n    const now = new Date();\r\n    const year = now.getUTCFullYear();\r\n    const month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n    const day = String(now.getUTCDate()).padStart(2, '0');\r\n    const hours = String(now.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n    const seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nconst getSystemInfo = () => {\r\n    const userData = getStoredUserData();\r\n    return {\r\n        userAgent: navigator.userAgent,\r\n        platform: navigator.platform,\r\n        language: navigator.language,\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n        timestamp: getCurrentUTCDateTime(),\r\n        currentUser: userData?.nickname || null\r\n    };\r\n};\r\n\r\nconst clearStorage = (preserveRememberMe = false) => {\r\n    const isLoginInProgress = localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\r\n    if (isLoginInProgress) return;\r\n\r\n    const rememberedSettings = {};\r\n    if (preserveRememberMe) {\r\n        rememberedSettings.rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME);\r\n        rememberedSettings.rememberedEmail = localStorage.getItem('rememberedEmail');\r\n    }\r\n\r\n    localStorage.clear();\r\n    sessionStorage.clear();\r\n\r\n    if (preserveRememberMe) {\r\n        Object.entries(rememberedSettings).forEach(([key, value]) => {\r\n            if (value) localStorage.setItem(key, value);\r\n        });\r\n    }\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    const storedUser = {\r\n        ...userData,\r\n        lastActive: currentDateTime,\r\n        lastUpdated: currentDateTime,\r\n        systemInfo: getSystemInfo()\r\n    };\r\n\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n    } catch (error) {\r\n        console.error('Error updating user data:', error);\r\n        throw new Error('Failed to update user data');\r\n    }\r\n};\r\n\r\nconst checkSessionExpiry = () => {\r\n    if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\r\n        return false;\r\n    }\r\n\r\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n    if (!lastActive) return true;\r\n\r\n    const currentTime = new Date().getTime();\r\n    const lastActiveTime = new Date(lastActive).getTime();\r\n    const timeDifference = currentTime - lastActiveTime;\r\n\r\n    if (timeDifference > API_CONFIG.WARNING_TIME && \r\n        !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\r\n        toast.warning('Your session will expire soon. Please save your work.', {\r\n            toastId: 'session-warning'\r\n        });\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\r\n    }\r\n\r\n    return timeDifference > API_CONFIG.SESSION_TIMEOUT;\r\n};\r\n\r\n// API Instance\r\nconst Api = axios.create({\r\n    baseURL: API_CONFIG.BASE_URL,\r\n    timeout: API_CONFIG.TIMEOUT,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        if (!config.url.includes('/login') && checkSessionExpiry()) {\r\n            clearStorage(true);\r\n            window.location.href = '/login?session=expired';\r\n            return Promise.reject('Session expired');\r\n        }\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        config.metadata = {\r\n            startTime: new Date().getTime(),\r\n            requestId: Math.random().toString(36).substring(7),\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n        \r\n        return {\r\n            ...response,\r\n            timestamp: currentDateTime,\r\n            duration: new Date().getTime() - response.config.metadata.startTime\r\n        };\r\n    },\r\n    (error) => {\r\n        if (!error.config.url.includes('/login') && error.response?.status === 401) {\r\n            clearStorage(true);\r\n            window.location.href = '/login?session=expired';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    const currentDateTime = getCurrentUTCDateTime();\r\n    const userData = getStoredUserData();\r\n    \r\n    console.error('API Error:', {\r\n        message: errorMessage,\r\n        timestamp: currentDateTime,\r\n        currentUser: userData?.nickname,\r\n        error: error\r\n    });\r\n\r\n    if (!error.config.url.includes('/login')) {\r\n        toast.error(errorMessage);\r\n    }\r\n\r\n    return {\r\n        message: errorMessage,\r\n        timestamp: currentDateTime,\r\n        status: error.response?.status,\r\n        data: error.response?.data\r\n    };\r\n};\r\n\r\n// API Functions\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.LOGIN_IN_PROGRESS, 'true');\r\n        const currentDateTime = getCurrentUTCDateTime();\r\n        \r\n        const loginData = {\r\n            ...data,\r\n            timestamp: currentDateTime,\r\n            systemInfo: getSystemInfo()\r\n        };\r\n\r\n        const response = await Api.post('/users/login', loginData);\r\n\r\n        if (response.data?.success) {\r\n            const { user, token } = response.data.data;\r\n            const sessionId = Math.random().toString(36).substring(7);\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_START, currentDateTime);\r\n            localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, currentDateTime);\r\n            \r\n            updateStoredUserData({\r\n                ...user,\r\n                sessionId,\r\n                lastLogin: currentDateTime\r\n            });\r\n\r\n            console.log('Login successful:', {\r\n                userId: user._id,\r\n                nickname: user.nickname,\r\n                sessionId,\r\n                timestamp: currentDateTime\r\n            });\r\n        }\r\n        \r\n        localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\r\n        return response;\r\n    } catch (error) {\r\n        localStorage.removeItem(STORAGE_KEYS.LOGIN_IN_PROGRESS);\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\r\n            return false;\r\n        }\r\n\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n\r\n        if (!token || !userId) return false;\r\n\r\n        if (lastActive) {\r\n            const lastActiveTime = new Date(lastActive).getTime();\r\n            const currentTime = new Date().getTime();\r\n            if (currentTime - lastActiveTime > API_CONFIG.SESSION_TIMEOUT) {\r\n                clearStorage(true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Auth check error:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error getting user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Rest of your API functions remain the same...\r\n\r\n// Initialize session checker\r\nif (typeof window !== 'undefined') {\r\n    setInterval(() => {\r\n        if (isLoggedIn() && !localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\r\n            if (checkSessionExpiry()) {\r\n                console.log('Session expired at:', getCurrentUTCDateTime());\r\n                clearStorage(true);\r\n                window.location.href = '/login?session=expired';\r\n            }\r\n        }\r\n    }, API_CONFIG.CHECK_INTERVAL);\r\n}\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}