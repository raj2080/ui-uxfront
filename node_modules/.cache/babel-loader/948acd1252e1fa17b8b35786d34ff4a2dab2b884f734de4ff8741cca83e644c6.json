{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Constants\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst SESSION_TIMEOUT = 60 * 1000; // 1 minute\nconst WARNING_TIME = 45 * 1000; // Show warning after 45 seconds\nconst INITIAL_TIMESTAMP = '2025-02-07 19:21:07';\nconst INITIAL_USER = 'raj2080';\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_ID: 'sessionId',\n  SESSION_START: 'sessionStart',\n  SESSION_WARNING_SHOWN: 'sessionWarningShown'\n};\n\n// Helper Functions\nconst getCurrentDateTime = () => {\n  const now = new Date();\n  return now.toISOString().slice(0, 19).replace('T', ' ');\n};\nconst getCurrentUser = () => {\n  const userData = localStorage.getItem(STORAGE_KEYS.USER);\n  if (!userData) return INITIAL_USER;\n  const user = JSON.parse(userData);\n  return user.nickname || INITIAL_USER;\n};\nconst clearStorage = () => {\n  Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\n  sessionStorage.clear();\n  document.cookie.split(\";\").forEach(cookie => {\n    document.cookie = cookie.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n  });\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const userToStore = {\n    _id: userData._id || userData.id,\n    nickname: userData.nickname || INITIAL_USER,\n    email: userData.email,\n    updatedAt: userData.updatedAt || INITIAL_TIMESTAMP,\n    lastActive: getCurrentDateTime()\n  };\n  localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n  localStorage.setItem(STORAGE_KEYS.SESSION_START, getCurrentDateTime());\n};\nconst checkSessionExpiry = () => {\n  const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n  if (!lastActive) return true;\n  const currentTime = new Date().getTime();\n  const lastActiveTime = new Date(lastActive).getTime();\n  const timeDifference = currentTime - lastActiveTime;\n  if (timeDifference > WARNING_TIME && !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\n    toast.warning('Your session will expire in 15 seconds. Please save your work.', {\n      toastId: 'session-warning'\n    });\n    localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\n  }\n  return timeDifference > SESSION_TIMEOUT;\n};\n\n// API Instance Configuration\nconst Api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request Interceptor\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (checkSessionExpiry()) {\n    clearStorage();\n    window.location.href = '/login?session=expired';\n    return Promise.reject('Session expired');\n  }\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n  config.metadata = {\n    startTime: new Date(),\n    requestId: Math.random().toString(36).substring(7),\n    timestamp: getCurrentDateTime(),\n    user: getCurrentUser()\n  };\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Request:', {\n      url: config.url,\n      method: config.method,\n      requestId: config.metadata.requestId,\n      headers: config.headers,\n      timestamp: config.metadata.timestamp,\n      user: config.metadata.user\n    });\n  }\n  return config;\n}, error => Promise.reject(handleApiError(error)));\n\n// Response Interceptor\nApi.interceptors.response.use(response => {\n  const requestStartTime = response.config.metadata.startTime;\n  response.duration = new Date() - requestStartTime;\n  localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API Response:', {\n      url: response.config.url,\n      status: response.status,\n      duration: response.duration,\n      requestId: response.config.metadata.requestId,\n      timestamp: getCurrentDateTime()\n    });\n  }\n  return response;\n}, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStorage();\n    window.location.href = '/login?session=expired';\n  }\n  return Promise.reject(handleApiError(error));\n});\n\n// Error Handler\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response5, _error$response6;\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n  const timestamp = getCurrentDateTime();\n  if (process.env.NODE_ENV === 'development') {\n    var _error$response3, _error$response4, _error$config, _error$config2;\n    console.error('API Error:', {\n      message: errorMessage,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n      timestamp,\n      user: getCurrentUser()\n    });\n  }\n  toast.error(errorMessage);\n  return {\n    message: errorMessage,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    data: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n    timestamp,\n    user: getCurrentUser(),\n    originalError: error\n  };\n};\n\n// API Functions\nexport const signupApi = async data => {\n  try {\n    const response = await Api.post('/users/signup', {\n      ...data,\n      timestamp: getCurrentDateTime()\n    });\n    toast.success('Registration successful! Please log in.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const loginApi = async data => {\n  try {\n    var _response$data;\n    localStorage.removeItem(STORAGE_KEYS.SESSION_WARNING_SHOWN);\n    const response = await Api.post('/users/login', {\n      ...data,\n      timestamp: getCurrentDateTime()\n    });\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.data) {\n      const {\n        user,\n        token\n      } = response.data.data;\n      localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\n      localStorage.setItem(STORAGE_KEYS.SESSION_START, getCurrentDateTime());\n      localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\n      updateStoredUserData(user);\n      toast.success(`Welcome back, ${user.nickname || INITIAL_USER}!`);\n    }\n    return response;\n  } catch (error) {\n    clearStorage();\n    throw handleApiError(error);\n  }\n};\nexport const createConfession = async confessionData => {\n  try {\n    var _response$data2;\n    const requiredFields = ['title', 'content', 'category'];\n    for (const field of requiredFields) {\n      if (!confessionData[field]) {\n        throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n      }\n    }\n    const formData = new FormData();\n    const currentData = {\n      ...confessionData,\n      author: getCurrentUser(),\n      timestamp: getCurrentDateTime()\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.post('users/confessions/create', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.success) {\n      toast.success('Confession created successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateConfession = async (id, confessionData) => {\n  try {\n    var _response$data3;\n    const formData = new FormData();\n    const currentData = {\n      ...confessionData,\n      updatedAt: getCurrentDateTime()\n    };\n    Object.keys(currentData).forEach(key => {\n      if (key !== 'image') {\n        formData.append(key, currentData[key]);\n      }\n    });\n    if (confessionData.image) {\n      formData.append('image', confessionData.image);\n    }\n    const response = await Api.put(`users/confessions/${id}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success) {\n      toast.success('Confession updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getAllConfessions = async (page = 1, limit = 10) => {\n  try {\n    const response = await Api.get(`users/confessions/all?page=${page}&limit=${limit}`);\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserConfessions = async () => {\n  try {\n    const response = await Api.get('users/confessions/my');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const deleteConfession = async id => {\n  try {\n    var _response$data4;\n    const response = await Api.delete(`users/confessions/${id}`);\n    if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) {\n      toast.success('Confession deleted successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const submitContactUs = async contactData => {\n  try {\n    var _response$data5;\n    const requiredFields = ['name', 'phonenumber', 'email', 'subject', 'message', 'category'];\n    for (const field of requiredFields) {\n      if (!contactData[field]) {\n        throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n      }\n    }\n    const response = await Api.post('/users/contactUs', {\n      ...contactData,\n      timestamp: getCurrentDateTime()\n    });\n    if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.success) {\n      toast.success('Contact form submitted successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const forgotPasswordApi = async email => {\n  try {\n    const response = await Api.post('/users/forgot-password', {\n      email,\n      timestamp: getCurrentDateTime()\n    });\n    toast.success('Password reset link sent! Please check your email.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const resetPasswordApi = async (token, newPassword) => {\n  try {\n    const response = await Api.post(`/users/reset-password/${token}`, {\n      newPassword,\n      timestamp: getCurrentDateTime()\n    });\n    toast.success('Password reset successful! Please log in with your new password.');\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    var _response$data6;\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) throw new Error('User ID not found. Please login again.');\n    const response = await Api.get(`/users/profile/${userId}`);\n    if ((_response$data6 = response.data) !== null && _response$data6 !== void 0 && _response$data6.data) {\n      updateStoredUserData(response.data.data);\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    var _response$data7;\n    const response = await Api.put('/users/profile/update', {\n      ...userData,\n      timestamp: getCurrentDateTime()\n    });\n    if ((_response$data7 = response.data) !== null && _response$data7 !== void 0 && _response$data7.success) {\n      updateStoredUserData(response.data.user);\n      toast.success('Profile updated successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const changePassword = async passwordData => {\n  try {\n    var _response$data8;\n    const response = await Api.put('/users/change-password', {\n      ...passwordData,\n      timestamp: getCurrentDateTime()\n    });\n    if ((_response$data8 = response.data) !== null && _response$data8 !== void 0 && _response$data8.success) {\n      toast.success('Password changed successfully!');\n    }\n    return response;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\nexport const isLoggedIn = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\n    if (!token || !userId) return false;\n    if (lastActive) {\n      const lastActiveTime = new Date(lastActive).getTime();\n      const currentTime = new Date().getTime();\n      const sessionDuration = currentTime - lastActiveTime;\n      if (sessionDuration > SESSION_TIMEOUT) {\n        clearStorage();\n        window.location.href = '/login?session=expired';\n        return false;\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Error checking auth status:', {\n      error: error.message,\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    });\n    return false;\n  }\n};\nexport const logout = () => {\n  try {\n    Api.post('/users/logout', {\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    }).finally(() => {\n      clearStorage();\n      window.location.href = '/login';\n    });\n  } catch (error) {\n    console.error('Logout error:', {\n      error: error.message,\n      timestamp: getCurrentDateTime(),\n      user: getCurrentUser()\n    });\n    clearStorage();\n    window.location.href = '/login';\n  }\n};\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error parsing stored user data:', error);\n    return null;\n  }\n};\n\n// Initialize session check interval\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    if (isLoggedIn()) {\n      checkSessionExpiry();\n    }\n  }, 10000); // Check every 10 seconds\n}\nexport default Api;","map":{"version":3,"names":["axios","toast","API_BASE_URL","SESSION_TIMEOUT","WARNING_TIME","INITIAL_TIMESTAMP","INITIAL_USER","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","SESSION_ID","SESSION_START","SESSION_WARNING_SHOWN","getCurrentDateTime","now","Date","toISOString","slice","replace","getCurrentUser","userData","localStorage","getItem","user","JSON","parse","nickname","clearStorage","Object","values","forEach","key","removeItem","sessionStorage","clear","document","cookie","split","toUTCString","updateStoredUserData","userToStore","_id","id","email","updatedAt","lastActive","setItem","stringify","checkSessionExpiry","currentTime","getTime","lastActiveTime","timeDifference","warning","toastId","Api","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","window","location","href","Promise","reject","Authorization","metadata","startTime","requestId","Math","random","toString","substring","timestamp","process","env","NODE_ENV","console","log","url","method","error","handleApiError","response","requestStartTime","duration","status","_error$response","_error$response2","_error$response2$data","_error$response5","_error$response6","errorMessage","data","message","_error$response3","_error$response4","_error$config","_error$config2","originalError","signupApi","post","success","loginApi","_response$data","createConfession","confessionData","_response$data2","requiredFields","field","Error","charAt","toUpperCase","formData","FormData","currentData","author","keys","append","image","updateConfession","_response$data3","put","getAllConfessions","page","limit","get","getUserConfessions","deleteConfession","_response$data4","delete","submitContactUs","contactData","_response$data5","forgotPasswordApi","resetPasswordApi","newPassword","getUserProfile","_response$data6","userId","updateUserProfile","_response$data7","changePassword","passwordData","_response$data8","isLoggedIn","sessionDuration","logout","finally","getStoredUserData","setInterval"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Constants\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst SESSION_TIMEOUT = 60 * 1000; // 1 minute\r\nconst WARNING_TIME = 45 * 1000; // Show warning after 45 seconds\r\nconst INITIAL_TIMESTAMP = '2025-02-07 19:21:07';\r\nconst INITIAL_USER = 'raj2080';\r\n\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_ID: 'sessionId',\r\n    SESSION_START: 'sessionStart',\r\n    SESSION_WARNING_SHOWN: 'sessionWarningShown'\r\n};\r\n\r\n// Helper Functions\r\nconst getCurrentDateTime = () => {\r\n    const now = new Date();\r\n    return now.toISOString().slice(0, 19).replace('T', ' ');\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n    if (!userData) return INITIAL_USER;\r\n    const user = JSON.parse(userData);\r\n    return user.nickname || INITIAL_USER;\r\n};\r\n\r\nconst clearStorage = () => {\r\n    Object.values(STORAGE_KEYS).forEach(key => localStorage.removeItem(key));\r\n    sessionStorage.clear();\r\n    document.cookie.split(\";\").forEach(cookie => {\r\n        document.cookie = cookie.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\r\n    });\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const userToStore = {\r\n        _id: userData._id || userData.id,\r\n        nickname: userData.nickname || INITIAL_USER,\r\n        email: userData.email,\r\n        updatedAt: userData.updatedAt || INITIAL_TIMESTAMP,\r\n        lastActive: getCurrentDateTime()\r\n    };\r\n    \r\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userToStore));\r\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n    localStorage.setItem(STORAGE_KEYS.SESSION_START, getCurrentDateTime());\r\n};\r\n\r\nconst checkSessionExpiry = () => {\r\n    const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n    if (!lastActive) return true;\r\n\r\n    const currentTime = new Date().getTime();\r\n    const lastActiveTime = new Date(lastActive).getTime();\r\n    const timeDifference = currentTime - lastActiveTime;\r\n\r\n    if (timeDifference > WARNING_TIME && !localStorage.getItem(STORAGE_KEYS.SESSION_WARNING_SHOWN)) {\r\n        toast.warning('Your session will expire in 15 seconds. Please save your work.', {\r\n            toastId: 'session-warning'\r\n        });\r\n        localStorage.setItem(STORAGE_KEYS.SESSION_WARNING_SHOWN, 'true');\r\n    }\r\n\r\n    return timeDifference > SESSION_TIMEOUT;\r\n};\r\n\r\n// API Instance Configuration\r\nconst Api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Request Interceptor\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        \r\n        if (checkSessionExpiry()) {\r\n            clearStorage();\r\n            window.location.href = '/login?session=expired';\r\n            return Promise.reject('Session expired');\r\n        }\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n\r\n        config.metadata = { \r\n            startTime: new Date(),\r\n            requestId: Math.random().toString(36).substring(7),\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        };\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Request:', {\r\n                url: config.url,\r\n                method: config.method,\r\n                requestId: config.metadata.requestId,\r\n                headers: config.headers,\r\n                timestamp: config.metadata.timestamp,\r\n                user: config.metadata.user\r\n            });\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(handleApiError(error))\r\n);\r\n\r\n// Response Interceptor\r\nApi.interceptors.response.use(\r\n    (response) => {\r\n        const requestStartTime = response.config.metadata.startTime;\r\n        response.duration = new Date() - requestStartTime;\r\n\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('API Response:', {\r\n                url: response.config.url,\r\n                status: response.status,\r\n                duration: response.duration,\r\n                requestId: response.config.metadata.requestId,\r\n                timestamp: getCurrentDateTime()\r\n            });\r\n        }\r\n\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        if (error.response?.status === 401) {\r\n            clearStorage();\r\n            window.location.href = '/login?session=expired';\r\n        }\r\n        return Promise.reject(handleApiError(error));\r\n    }\r\n);\r\n\r\n// Error Handler\r\nconst handleApiError = (error) => {\r\n    const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';\r\n    const timestamp = getCurrentDateTime();\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.error('API Error:', {\r\n            message: errorMessage,\r\n            status: error.response?.status,\r\n            data: error.response?.data,\r\n            url: error.config?.url,\r\n            method: error.config?.method,\r\n            timestamp,\r\n            user: getCurrentUser()\r\n        });\r\n    }\r\n\r\n    toast.error(errorMessage);\r\n    \r\n    return {\r\n        message: errorMessage,\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        timestamp,\r\n        user: getCurrentUser(),\r\n        originalError: error\r\n    };\r\n};\r\n\r\n// API Functions\r\nexport const signupApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('/users/signup', {\r\n            ...data,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        toast.success('Registration successful! Please log in.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        localStorage.removeItem(STORAGE_KEYS.SESSION_WARNING_SHOWN);\r\n        const response = await Api.post('/users/login', {\r\n            ...data,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        \r\n        if (response.data?.data) {\r\n            const { user, token } = response.data.data;\r\n            \r\n            localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n            localStorage.setItem(STORAGE_KEYS.USER_ID, user._id || user.id);\r\n            localStorage.setItem(STORAGE_KEYS.SESSION_START, getCurrentDateTime());\r\n            localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, getCurrentDateTime());\r\n            updateStoredUserData(user);\r\n\r\n            toast.success(`Welcome back, ${user.nickname || INITIAL_USER}!`);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        clearStorage();\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const createConfession = async (confessionData) => {\r\n    try {\r\n        const requiredFields = ['title', 'content', 'category'];\r\n        for (const field of requiredFields) {\r\n            if (!confessionData[field]) {\r\n                throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\r\n            }\r\n        }\r\n\r\n        const formData = new FormData();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            author: getCurrentUser(),\r\n            timestamp: getCurrentDateTime()\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.post('users/confessions/create', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession created successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateConfession = async (id, confessionData) => {\r\n    try {\r\n        const formData = new FormData();\r\n        \r\n        const currentData = {\r\n            ...confessionData,\r\n            updatedAt: getCurrentDateTime()\r\n        };\r\n\r\n        Object.keys(currentData).forEach(key => {\r\n            if (key !== 'image') {\r\n                formData.append(key, currentData[key]);\r\n            }\r\n        });\r\n        \r\n        if (confessionData.image) {\r\n            formData.append('image', confessionData.image);\r\n        }\r\n\r\n        const response = await Api.put(`users/confessions/${id}`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n\r\n        if (response.data?.success) {\r\n            toast.success('Confession updated successfully!');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getAllConfessions = async (page = 1, limit = 10) => {\r\n    try {\r\n        const response = await Api.get(`users/confessions/all?page=${page}&limit=${limit}`);\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserConfessions = async () => {\r\n    try {\r\n        const response = await Api.get('users/confessions/my');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const deleteConfession = async (id) => {\r\n    try {\r\n        const response = await Api.delete(`users/confessions/${id}`);\r\n        if (response.data?.success) {\r\n            toast.success('Confession deleted successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const submitContactUs = async (contactData) => {\r\n    try {\r\n        const requiredFields = ['name', 'phonenumber', 'email', 'subject', 'message', 'category'];\r\n        for (const field of requiredFields) {\r\n            if (!contactData[field]) {\r\n                throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\r\n            }\r\n        }\r\n\r\n        const response = await Api.post('/users/contactUs', {\r\n            ...contactData,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        \r\n        if (response.data?.success) {\r\n            toast.success('Contact form submitted successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const forgotPasswordApi = async (email) => {\r\n    try {\r\n        const response = await Api.post('/users/forgot-password', {\r\n            email,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        toast.success('Password reset link sent! Please check your email.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const resetPasswordApi = async (token, newPassword) => {\r\n    try {\r\n        const response = await Api.post(`/users/reset-password/${token}`, {\r\n            newPassword,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        toast.success('Password reset successful! Please log in with your new password.');\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n    try {\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        if (!userId) throw new Error('User ID not found. Please login again.');\r\n\r\n        const response = await Api.get(`/users/profile/${userId}`);\r\n        if (response.data?.data) {\r\n            updateStoredUserData(response.data.data);\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const updateUserProfile = async (userData) => {\r\n    try {\r\n        const response = await Api.put('/users/profile/update', {\r\n            ...userData,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        if (response.data?.success) {\r\n            updateStoredUserData(response.data.user);\r\n            toast.success('Profile updated successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const changePassword = async (passwordData) => {\r\n    try {\r\n        const response = await Api.put('/users/change-password', {\r\n            ...passwordData,\r\n            timestamp: getCurrentDateTime()\r\n        });\r\n        if (response.data?.success) {\r\n            toast.success('Password changed successfully!');\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        throw handleApiError(error);\r\n    }\r\n};\r\n\r\nexport const isLoggedIn = () => {\r\n    try {\r\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\r\n        const lastActive = localStorage.getItem(STORAGE_KEYS.LAST_ACTIVE);\r\n\r\n        if (!token || !userId) return false;\r\n\r\n        if (lastActive) {\r\n            const lastActiveTime = new Date(lastActive).getTime();\r\n            const currentTime = new Date().getTime();\r\n            const sessionDuration = currentTime - lastActiveTime;\r\n            \r\n            if (sessionDuration > SESSION_TIMEOUT) {\r\n                clearStorage();\r\n                window.location.href = '/login?session=expired';\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error checking auth status:', {\r\n            error: error.message,\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        });\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    try {\r\n        Api.post('/users/logout', {\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        }).finally(() => {\r\n            clearStorage();\r\n            window.location.href = '/login';\r\n        });\r\n    } catch (error) {\r\n        console.error('Logout error:', {\r\n            error: error.message,\r\n            timestamp: getCurrentDateTime(),\r\n            user: getCurrentUser()\r\n        });\r\n        clearStorage();\r\n        window.location.href = '/login';\r\n    }\r\n};\r\n\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error parsing stored user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Initialize session check interval\r\nif (typeof window !== 'undefined') {\r\n    setInterval(() => {\r\n        if (isLoggedIn()) {\r\n            checkSessionExpiry();\r\n        }\r\n    }, 10000); // Check every 10 seconds\r\n}\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}