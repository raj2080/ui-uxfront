{"ast":null,"code":"import axios from 'axios';\n\n// Creating backend configuration\nconst Api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include token in all requests\nApi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const signupApi = data => Api.post('users/signup', data);\n\n// Modified login API function to properly handle user data\nexport const loginApi = async data => {\n  try {\n    const response = await Api.post('users/login', data);\n\n    // Check if we have a successful response with user data\n    if (response.data && response.data.data) {\n      const {\n        user,\n        token\n      } = response.data.data;\n\n      // Store token\n      localStorage.setItem('token', token);\n\n      // Store user ID from the response\n      if (user._id) {\n        localStorage.setItem('userId', user._id);\n      } else if (user.id) {\n        localStorage.setItem('userId', user.id);\n      }\n\n      // Store complete user data\n      localStorage.setItem('user', JSON.stringify({\n        _id: user._id || user.id,\n        nickname: user.nickname,\n        email: user.email\n      }));\n      console.log('Stored user data:', {\n        userId: user._id || user.id,\n        nickname: user.nickname,\n        email: user.email\n      });\n    } else {\n      throw new Error('Invalid response format from server');\n    }\n    return response;\n  } catch (error) {\n    console.error('Login error:', error);\n    // Clear any partial data on error\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('user');\n    throw error;\n  }\n};\n\n// Modified get user profile function to handle cases where userId might not be provided\nexport const getUserProfile = async () => {\n  try {\n    // Get userId from localStorage\n    const userId = localStorage.getItem('userId');\n    if (!userId) {\n      throw new Error('User ID not found. Please login again.');\n    }\n    const response = await Api.get(`users/profile/${userId}`);\n\n    // Update stored user data with any new information\n    if (response.data && response.data.data) {\n      localStorage.setItem('user', JSON.stringify(response.data.data));\n    }\n    return response;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching user profile:', error);\n\n    // If we get a 401 error, clear the stored data and force re-login\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('user');\n    }\n    throw error;\n  }\n};\n\n// Add this new function for updating user profile\nexport const updateUserProfile = async userData => {\n  try {\n    const response = await Api.put('users/profile/update', userData);\n\n    // If update is successful, update the stored user data\n    if (response.data && response.data.success) {\n      const updatedUser = response.data.user;\n\n      // Update stored user data\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const newUserData = {\n        ...currentUser,\n        nickname: updatedUser.nickname,\n        email: updatedUser.email,\n        updatedAt: updatedUser.updatedAt\n      };\n      localStorage.setItem('user', JSON.stringify(newUserData));\n      console.log('Updated user data:', newUserData);\n    }\n    return response;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n    console.error('Error updating profile:', error);\n\n    // If we get a 401 error, clear the stored data and force re-login\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('user');\n    }\n\n    // Throw the error with a meaningful message\n    throw {\n      message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to update profile',\n      status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n      data: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data\n    };\n  }\n};\n\n// Utility function to check if user is logged in\nexport const isLoggedIn = () => {\n  const token = localStorage.getItem('token');\n  const userId = localStorage.getItem('userId');\n  return !!(token && userId);\n};\n\n// Utility function to get stored user data\nexport const getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem('user');\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Error parsing stored user data:', error);\n    return null;\n  }\n};\n\n// Logout function\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('user');\n};\nexport default Api;","map":{"version":3,"names":["axios","Api","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","signupApi","data","post","loginApi","response","user","setItem","_id","id","JSON","stringify","nickname","email","console","log","userId","Error","removeItem","getUserProfile","get","_error$response","status","updateUserProfile","userData","put","success","updatedUser","currentUser","parse","newUserData","updatedAt","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","message","isLoggedIn","getStoredUserData","logout"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Creating backend configuration\r\nconst Api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Add request interceptor to include token in all requests\r\nApi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport const signupApi = (data) => Api.post('users/signup', data);\r\n\r\n// Modified login API function to properly handle user data\r\nexport const loginApi = async (data) => {\r\n    try {\r\n        const response = await Api.post('users/login', data);\r\n        \r\n        // Check if we have a successful response with user data\r\n        if (response.data && response.data.data) {\r\n            const { user, token } = response.data.data;\r\n            \r\n            // Store token\r\n            localStorage.setItem('token', token);\r\n            \r\n            // Store user ID from the response\r\n            if (user._id) {\r\n                localStorage.setItem('userId', user._id);\r\n            } else if (user.id) {\r\n                localStorage.setItem('userId', user.id);\r\n            }\r\n\r\n            // Store complete user data\r\n            localStorage.setItem('user', JSON.stringify({\r\n                _id: user._id || user.id,\r\n                nickname: user.nickname,\r\n                email: user.email\r\n            }));\r\n\r\n            console.log('Stored user data:', {\r\n                userId: user._id || user.id,\r\n                nickname: user.nickname,\r\n                email: user.email\r\n            });\r\n        } else {\r\n            throw new Error('Invalid response format from server');\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Login error:', error);\r\n        // Clear any partial data on error\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userId');\r\n        localStorage.removeItem('user');\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Modified get user profile function to handle cases where userId might not be provided\r\nexport const getUserProfile = async () => {\r\n    try {\r\n        // Get userId from localStorage\r\n        const userId = localStorage.getItem('userId');\r\n        \r\n        if (!userId) {\r\n            throw new Error('User ID not found. Please login again.');\r\n        }\r\n\r\n        const response = await Api.get(`users/profile/${userId}`);\r\n        \r\n        // Update stored user data with any new information\r\n        if (response.data && response.data.data) {\r\n            localStorage.setItem('user', JSON.stringify(response.data.data));\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n        \r\n        // If we get a 401 error, clear the stored data and force re-login\r\n        if (error.response?.status === 401) {\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('userId');\r\n            localStorage.removeItem('user');\r\n        }\r\n        \r\n        throw error;\r\n    }\r\n};\r\n\r\n// Add this new function for updating user profile\r\nexport const updateUserProfile = async (userData) => {\r\n    try {\r\n        const response = await Api.put('users/profile/update', userData);\r\n        \r\n        // If update is successful, update the stored user data\r\n        if (response.data && response.data.success) {\r\n            const updatedUser = response.data.user;\r\n            \r\n            // Update stored user data\r\n            const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n            const newUserData = {\r\n                ...currentUser,\r\n                nickname: updatedUser.nickname,\r\n                email: updatedUser.email,\r\n                updatedAt: updatedUser.updatedAt\r\n            };\r\n            \r\n            localStorage.setItem('user', JSON.stringify(newUserData));\r\n            \r\n            console.log('Updated user data:', newUserData);\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error updating profile:', error);\r\n        \r\n        // If we get a 401 error, clear the stored data and force re-login\r\n        if (error.response?.status === 401) {\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('userId');\r\n            localStorage.removeItem('user');\r\n        }\r\n        \r\n        // Throw the error with a meaningful message\r\n        throw {\r\n            message: error.response?.data?.message || 'Failed to update profile',\r\n            status: error.response?.status,\r\n            data: error.response?.data\r\n        };\r\n    }\r\n};\r\n\r\n// Utility function to check if user is logged in\r\nexport const isLoggedIn = () => {\r\n    const token = localStorage.getItem('token');\r\n    const userId = localStorage.getItem('userId');\r\n    return !!(token && userId);\r\n};\r\n\r\n// Utility function to get stored user data\r\nexport const getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem('user');\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        console.error('Error parsing stored user data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Logout function\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('user');\r\n};\r\n\r\nexport default Api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}