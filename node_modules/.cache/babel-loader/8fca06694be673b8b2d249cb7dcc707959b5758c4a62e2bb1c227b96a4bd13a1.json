{"ast":null,"code":"var _jsxFileName = \"C:\\\\uiux development\\\\frontend\\\\confessapp\\\\src\\\\pages\\\\confession\\\\CreateConfession.jsx\",\n  _s = $RefreshSig$();\n// src/pages/confession/CreateConfession.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { toast } from 'react-toastify';\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\nimport './CreateConfession.css';\n\n// Utility function for API call\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createConfession = async formData => {\n  try {\n    const response = await fetch('http://localhost:5000/api/confessions/create', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Something went wrong');\n    }\n    return data;\n  } catch (error) {\n    console.error('Create Confession Error:', error);\n    throw error;\n  }\n};\nconst CreateConfession = () => {\n  _s();\n  const navigate = useNavigate();\n  const [content, setContent] = useState('');\n  const [formData, setFormData] = useState({\n    title: '',\n    category: 'Personal',\n    image: null,\n    isAnonymous: false\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [imagePreview, setImagePreview] = useState(null);\n  const [characterCount, setCharacterCount] = useState(0);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Constants\n  const MAX_TITLE_LENGTH = 100;\n  const MAX_CONTENT_LENGTH = 5000;\n  const MAX_IMAGE_SIZE = 5 * 1024 * 1024; // 5MB\n  const ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n  const categories = ['Personal', 'Relationship', 'Work', 'Family', 'School', 'Other'];\n\n  // Check authentication on mount\n  useEffect(() => {\n    const checkAuth = () => {\n      const token = localStorage.getItem('token');\n      const lastActive = localStorage.getItem('lastActive');\n      if (!token) {\n        navigate('/login', {\n          state: {\n            from: '/create-confession',\n            message: 'Please login to create a confession'\n          }\n        });\n        return;\n      }\n\n      // Check session expiry (24 hours)\n      if (lastActive) {\n        const expiryTime = new Date(lastActive).getTime() + 24 * 60 * 60 * 1000;\n        if (Date.now() > expiryTime) {\n          localStorage.clear();\n          navigate('/login', {\n            state: {\n              message: 'Session expired. Please login again.'\n            }\n          });\n        }\n      }\n    };\n    checkAuth();\n  }, [navigate]);\n\n  // Form validation\n  const validateForm = () => {\n    if (!formData.title.trim()) {\n      toast.error('Please enter a title for your confession');\n      return false;\n    }\n    if (formData.title.length > MAX_TITLE_LENGTH) {\n      toast.error(`Title must be less than ${MAX_TITLE_LENGTH} characters`);\n      return false;\n    }\n    if (!content.trim()) {\n      toast.error('Please write your confession');\n      return false;\n    }\n    const plainTextContent = content.replace(/<[^>]*>/g, '');\n    if (plainTextContent.length > MAX_CONTENT_LENGTH) {\n      toast.error(`Confession must be less than ${MAX_CONTENT_LENGTH} characters`);\n      return false;\n    }\n    return true;\n  };\n\n  // Input handlers\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (type === 'text' && name === 'title' && value.length > MAX_TITLE_LENGTH) {\n      return;\n    }\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    setError('');\n  };\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!ALLOWED_IMAGE_TYPES.includes(file.type)) {\n      toast.error('Please upload only JPEG, PNG, GIF, or WebP images');\n      return;\n    }\n\n    // Validate file size\n    if (file.size > MAX_IMAGE_SIZE) {\n      toast.error('Image size should be less than 5MB');\n      return;\n    }\n    setFormData(prev => ({\n      ...prev,\n      image: file\n    }));\n\n    // Create image preview\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setImagePreview(reader.result);\n    };\n    reader.onerror = () => {\n      toast.error('Error reading image file');\n    };\n    reader.readAsDataURL(file);\n  };\n  const handleEditorChange = (event, editor) => {\n    const data = editor.getData();\n    setContent(data);\n    const plainText = data.replace(/<[^>]*>/g, '');\n    setCharacterCount(plainText.length);\n    if (plainText.length > MAX_CONTENT_LENGTH) {\n      setError(`Content exceeds maximum length of ${MAX_CONTENT_LENGTH} characters`);\n    } else {\n      setError('');\n    }\n  };\n\n  // Form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (isSubmitting) return;\n    if (!validateForm()) return;\n    setIsSubmitting(true);\n    setLoading(true);\n    setError('');\n    try {\n      const formDataToSend = new FormData();\n      formDataToSend.append('title', formData.title.trim());\n      formDataToSend.append('content', content.trim());\n      formDataToSend.append('category', formData.category);\n      formDataToSend.append('isAnonymous', formData.isAnonymous);\n      formDataToSend.append('createdAt', new Date().toISOString());\n      formDataToSend.append('author', '2025raj'); // Current user's login\n\n      if (formData.image) {\n        formDataToSend.append('image', formData.image);\n      }\n      const response = await createConfession(formDataToSend);\n      toast.success('Confession shared successfully!');\n      navigate('/confessions', {\n        state: {\n          message: 'Confession shared successfully!'\n        }\n      });\n    } catch (err) {\n      toast.error(err.message || 'Failed to create confession. Please try again.');\n      setError(err.message || 'Failed to create confession. Please try again.');\n    } finally {\n      setLoading(false);\n      setIsSubmitting(false);\n    }\n  };\n\n  // Confirmation before leaving\n  useEffect(() => {\n    const handleBeforeUnload = e => {\n      if (formData.title || content) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, [formData.title, content]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-confession-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Share Your Confession\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"confession-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: [\"Title\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `character-count ${formData.title.length > MAX_TITLE_LENGTH * 0.9 ? 'near-limit' : ''}`,\n            children: [formData.title.length, \"/\", MAX_TITLE_LENGTH]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          name: \"title\",\n          value: formData.title,\n          onChange: handleInputChange,\n          required: true,\n          maxLength: MAX_TITLE_LENGTH,\n          placeholder: \"Give your confession a title\",\n          className: \"form-input\",\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Your Confession\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `character-count ${characterCount > MAX_CONTENT_LENGTH * 0.9 ? 'near-limit' : ''}`,\n            children: [characterCount, \"/\", MAX_CONTENT_LENGTH]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CKEditor, {\n          editor: ClassicEditor,\n          data: content,\n          onChange: handleEditorChange,\n          config: {\n            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'undo', 'redo'],\n            placeholder: 'Share your thoughts...',\n            maxLength: MAX_CONTENT_LENGTH\n          },\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"category\",\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"category\",\n          name: \"category\",\n          value: formData.category,\n          onChange: handleInputChange,\n          required: true,\n          className: \"form-select\",\n          disabled: isSubmitting,\n          children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category,\n            children: category\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: [\"Add Image (optional)\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-info\",\n            children: \"Accepted formats: JPEG, PNG, GIF, WebP (Max: 5MB)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"image\",\n          name: \"image\",\n          accept: ALLOWED_IMAGE_TYPES.join(','),\n          onChange: handleImageChange,\n          className: \"form-input-file\",\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: imagePreview,\n            alt: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => {\n              setImagePreview(null);\n              setFormData(prev => ({\n                ...prev,\n                image: null\n              }));\n            },\n            className: \"remove-image-btn\",\n            disabled: isSubmitting,\n            children: \"Remove Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group checkbox-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: \"isAnonymous\",\n            checked: formData.isAnonymous,\n            onChange: handleInputChange,\n            className: \"checkbox-input\",\n            disabled: isSubmitting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 25\n          }, this), \"Post Anonymously\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button ${loading ? 'loading' : ''}`,\n        disabled: isSubmitting || loading || !formData.title.trim() || !content.trim(),\n        children: isSubmitting ? 'Posting...' : 'Share Confession'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateConfession, \"cn6Ibrxt/LIpgntGQXLFTqwnK40=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateConfession;\nexport default CreateConfession;\nvar _c;\n$RefreshReg$(_c, \"CreateConfession\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","CKEditor","ClassicEditor","toast","LoadingSpinner","jsxDEV","_jsxDEV","createConfession","formData","response","fetch","method","headers","localStorage","getItem","body","data","json","ok","Error","message","error","console","CreateConfession","_s","navigate","content","setContent","setFormData","title","category","image","isAnonymous","loading","setLoading","setError","imagePreview","setImagePreview","characterCount","setCharacterCount","isSubmitting","setIsSubmitting","MAX_TITLE_LENGTH","MAX_CONTENT_LENGTH","MAX_IMAGE_SIZE","ALLOWED_IMAGE_TYPES","categories","checkAuth","token","lastActive","state","from","expiryTime","Date","getTime","now","clear","validateForm","trim","length","plainTextContent","replace","handleInputChange","e","name","value","type","checked","target","prev","handleImageChange","file","files","includes","size","reader","FileReader","onloadend","result","onerror","readAsDataURL","handleEditorChange","event","editor","getData","plainText","handleSubmit","preventDefault","formDataToSend","FormData","append","toISOString","success","err","handleBeforeUnload","returnValue","window","addEventListener","removeEventListener","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onSubmit","htmlFor","id","onChange","required","maxLength","placeholder","disabled","config","toolbar","map","accept","join","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/uiux development/frontend/confessapp/src/pages/confession/CreateConfession.jsx"],"sourcesContent":["// src/pages/confession/CreateConfession.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\r\n\r\nimport './CreateConfession.css';\r\n\r\n// Utility function for API call\r\nconst createConfession = async (formData) => {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/confessions/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: formData\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            throw new Error(data.message || 'Something went wrong');\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Create Confession Error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nconst CreateConfession = () => {\r\n    const navigate = useNavigate();\r\n    const [content, setContent] = useState('');\r\n    const [formData, setFormData] = useState({\r\n        title: '',\r\n        category: 'Personal',\r\n        image: null,\r\n        isAnonymous: false\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [imagePreview, setImagePreview] = useState(null);\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    // Constants\r\n    const MAX_TITLE_LENGTH = 100;\r\n    const MAX_CONTENT_LENGTH = 5000;\r\n    const MAX_IMAGE_SIZE = 5 * 1024 * 1024; // 5MB\r\n    const ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n\r\n    const categories = [\r\n        'Personal',\r\n        'Relationship',\r\n        'Work',\r\n        'Family',\r\n        'School',\r\n        'Other'\r\n    ];\r\n\r\n    // Check authentication on mount\r\n    useEffect(() => {\r\n        const checkAuth = () => {\r\n            const token = localStorage.getItem('token');\r\n            const lastActive = localStorage.getItem('lastActive');\r\n\r\n            if (!token) {\r\n                navigate('/login', { \r\n                    state: { \r\n                        from: '/create-confession',\r\n                        message: 'Please login to create a confession' \r\n                    }\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Check session expiry (24 hours)\r\n            if (lastActive) {\r\n                const expiryTime = new Date(lastActive).getTime() + (24 * 60 * 60 * 1000);\r\n                if (Date.now() > expiryTime) {\r\n                    localStorage.clear();\r\n                    navigate('/login', {\r\n                        state: { message: 'Session expired. Please login again.' }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        checkAuth();\r\n    }, [navigate]);\r\n\r\n    // Form validation\r\n    const validateForm = () => {\r\n        if (!formData.title.trim()) {\r\n            toast.error('Please enter a title for your confession');\r\n            return false;\r\n        }\r\n\r\n        if (formData.title.length > MAX_TITLE_LENGTH) {\r\n            toast.error(`Title must be less than ${MAX_TITLE_LENGTH} characters`);\r\n            return false;\r\n        }\r\n\r\n        if (!content.trim()) {\r\n            toast.error('Please write your confession');\r\n            return false;\r\n        }\r\n\r\n        const plainTextContent = content.replace(/<[^>]*>/g, '');\r\n        if (plainTextContent.length > MAX_CONTENT_LENGTH) {\r\n            toast.error(`Confession must be less than ${MAX_CONTENT_LENGTH} characters`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    // Input handlers\r\n    const handleInputChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        \r\n        if (type === 'text' && name === 'title' && value.length > MAX_TITLE_LENGTH) {\r\n            return;\r\n        }\r\n\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value\r\n        }));\r\n        setError('');\r\n    };\r\n\r\n    const handleImageChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) return;\r\n\r\n        // Validate file type\r\n        if (!ALLOWED_IMAGE_TYPES.includes(file.type)) {\r\n            toast.error('Please upload only JPEG, PNG, GIF, or WebP images');\r\n            return;\r\n        }\r\n\r\n        // Validate file size\r\n        if (file.size > MAX_IMAGE_SIZE) {\r\n            toast.error('Image size should be less than 5MB');\r\n            return;\r\n        }\r\n\r\n        setFormData(prev => ({ ...prev, image: file }));\r\n        \r\n        // Create image preview\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            setImagePreview(reader.result);\r\n        };\r\n        reader.onerror = () => {\r\n            toast.error('Error reading image file');\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const handleEditorChange = (event, editor) => {\r\n        const data = editor.getData();\r\n        setContent(data);\r\n        const plainText = data.replace(/<[^>]*>/g, '');\r\n        setCharacterCount(plainText.length);\r\n\r\n        if (plainText.length > MAX_CONTENT_LENGTH) {\r\n            setError(`Content exceeds maximum length of ${MAX_CONTENT_LENGTH} characters`);\r\n        } else {\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    // Form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (isSubmitting) return;\r\n        if (!validateForm()) return;\r\n\r\n        setIsSubmitting(true);\r\n        setLoading(true);\r\n        setError('');\r\n\r\n        try {\r\n            const formDataToSend = new FormData();\r\n            formDataToSend.append('title', formData.title.trim());\r\n            formDataToSend.append('content', content.trim());\r\n            formDataToSend.append('category', formData.category);\r\n            formDataToSend.append('isAnonymous', formData.isAnonymous);\r\n            formDataToSend.append('createdAt', new Date().toISOString());\r\n            formDataToSend.append('author', '2025raj'); // Current user's login\r\n            \r\n            if (formData.image) {\r\n                formDataToSend.append('image', formData.image);\r\n            }\r\n\r\n            const response = await createConfession(formDataToSend);\r\n            toast.success('Confession shared successfully!');\r\n            navigate('/confessions', { \r\n                state: { message: 'Confession shared successfully!' }\r\n            });\r\n        } catch (err) {\r\n            toast.error(err.message || 'Failed to create confession. Please try again.');\r\n            setError(err.message || 'Failed to create confession. Please try again.');\r\n        } finally {\r\n            setLoading(false);\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    // Confirmation before leaving\r\n    useEffect(() => {\r\n        const handleBeforeUnload = (e) => {\r\n            if (formData.title || content) {\r\n                e.preventDefault();\r\n                e.returnValue = '';\r\n            }\r\n        };\r\n\r\n        window.addEventListener('beforeunload', handleBeforeUnload);\r\n        return () => window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    }, [formData.title, content]);\r\n\r\n    if (loading) {\r\n        return <LoadingSpinner />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"create-confession-container\">\r\n            <h2>Share Your Confession</h2>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            \r\n            <form onSubmit={handleSubmit} className=\"confession-form\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\">\r\n                        Title \r\n                        <span className={`character-count ${\r\n                            formData.title.length > MAX_TITLE_LENGTH * 0.9 ? 'near-limit' : ''\r\n                        }`}>\r\n                            {formData.title.length}/{MAX_TITLE_LENGTH}\r\n                        </span>\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        name=\"title\"\r\n                        value={formData.title}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        maxLength={MAX_TITLE_LENGTH}\r\n                        placeholder=\"Give your confession a title\"\r\n                        className=\"form-input\"\r\n                        disabled={isSubmitting}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>\r\n                        Your Confession\r\n                        <span className={`character-count ${\r\n                            characterCount > MAX_CONTENT_LENGTH * 0.9 ? 'near-limit' : ''\r\n                        }`}>\r\n                            {characterCount}/{MAX_CONTENT_LENGTH}\r\n                        </span>\r\n                    </label>\r\n                    <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={content}\r\n                        onChange={handleEditorChange}\r\n                        config={{\r\n                            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'undo', 'redo'],\r\n                            placeholder: 'Share your thoughts...',\r\n                            maxLength: MAX_CONTENT_LENGTH\r\n                        }}\r\n                        disabled={isSubmitting}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"category\">Category</label>\r\n                    <select\r\n                        id=\"category\"\r\n                        name=\"category\"\r\n                        value={formData.category}\r\n                        onChange={handleInputChange}\r\n                        required\r\n                        className=\"form-select\"\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        {categories.map(category => (\r\n                            <option key={category} value={category}>\r\n                                {category}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"image\">\r\n                        Add Image (optional)\r\n                        <span className=\"file-info\">\r\n                            Accepted formats: JPEG, PNG, GIF, WebP (Max: 5MB)\r\n                        </span>\r\n                    </label>\r\n                    <input\r\n                        type=\"file\"\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        accept={ALLOWED_IMAGE_TYPES.join(',')}\r\n                        onChange={handleImageChange}\r\n                        className=\"form-input-file\"\r\n                        disabled={isSubmitting}\r\n                    />\r\n                    {imagePreview && (\r\n                        <div className=\"image-preview\">\r\n                            <img src={imagePreview} alt=\"Preview\" />\r\n                            <button \r\n                                type=\"button\" \r\n                                onClick={() => {\r\n                                    setImagePreview(null);\r\n                                    setFormData(prev => ({ ...prev, image: null }));\r\n                                }}\r\n                                className=\"remove-image-btn\"\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Remove Image\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"form-group checkbox-group\">\r\n                    <label className=\"checkbox-label\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"isAnonymous\"\r\n                            checked={formData.isAnonymous}\r\n                            onChange={handleInputChange}\r\n                            className=\"checkbox-input\"\r\n                            disabled={isSubmitting}\r\n                        />\r\n                        Post Anonymously\r\n                    </label>\r\n                </div>\r\n\r\n                <button \r\n                    type=\"submit\" \r\n                    className={`submit-button ${loading ? 'loading' : ''}`}\r\n                    disabled={isSubmitting || loading || !formData.title.trim() || !content.trim()}\r\n                >\r\n                    {isSubmitting ? 'Posting...' : 'Share Confession'}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateConfession;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}