{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Configuration Constants\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\n  TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\n  WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\n  CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\n};\n\n// Storage Keys\nconst STORAGE_KEYS = {\n  TOKEN: 'token',\n  USER_ID: 'userId',\n  USER: 'user',\n  REFRESH_TOKEN: 'refreshToken',\n  LAST_ACTIVE: 'lastActive',\n  SESSION_ID: 'sessionId',\n  SESSION_START: 'sessionStart',\n  SESSION_WARNING_SHOWN: 'sessionWarningShown',\n  REMEMBER_ME: 'rememberMe',\n  REMEMBERED_EMAIL: 'rememberedEmail',\n  LOGIN_IN_PROGRESS: 'loginInProgress'\n};\n\n// Utility Functions\nconst getCurrentUTCDateTime = () => {\n  const now = new Date();\n  const year = now.getUTCFullYear();\n  const month = String(now.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(now.getUTCDate()).padStart(2, '0');\n  const hours = String(now.getUTCHours()).padStart(2, '0');\n  const minutes = String(now.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(now.getUTCSeconds()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n};\nconst getStoredUserData = () => {\n  try {\n    const userData = localStorage.getItem(STORAGE_KEYS.USER);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    const timestamp = getCurrentUTCDateTime();\n    console.error('Error getting user data:', {\n      error: error.message,\n      timestamp,\n      currentUser: null\n    });\n    return null;\n  }\n};\nconst getCurrentUser = () => {\n  const userData = getStoredUserData();\n  return (userData === null || userData === void 0 ? void 0 : userData.nickname) || 'raj2080';\n};\nconst getSystemInfo = () => {\n  const timestamp = getCurrentUTCDateTime();\n  const currentUser = getCurrentUser();\n  return {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    language: navigator.language,\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    screenResolution: `${window.screen.width}x${window.screen.height}`,\n    timestamp,\n    currentUser\n  };\n};\nconst clearStorage = (preserveEmail = false) => {\n  const timestamp = getCurrentUTCDateTime();\n  const currentUser = getCurrentUser();\n  if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\n    return;\n  }\n  const rememberedEmail = preserveEmail ? localStorage.getItem(STORAGE_KEYS.REMEMBERED_EMAIL) : null;\n  Object.keys(localStorage).forEach(key => {\n    if (key !== STORAGE_KEYS.REMEMBERED_EMAIL || !preserveEmail) {\n      try {\n        localStorage.removeItem(key);\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        console.error('Storage clear error:', {\n          key,\n          error: error.message,\n          timestamp,\n          currentUser\n        });\n      }\n    }\n  });\n  if (preserveEmail && rememberedEmail) {\n    localStorage.setItem(STORAGE_KEYS.REMEMBERED_EMAIL, rememberedEmail);\n  }\n};\nconst updateStoredUserData = userData => {\n  if (!userData) return;\n  const timestamp = getCurrentUTCDateTime();\n  const currentUser = getCurrentUser();\n  const storedUser = {\n    ...userData,\n    lastActive: timestamp,\n    lastUpdated: timestamp,\n    systemInfo: getSystemInfo()\n  };\n  try {\n    localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\n    localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, timestamp);\n  } catch (error) {\n    console.error('User data update error:', {\n      error: error.message,\n      timestamp,\n      currentUser\n    });\n    throw new Error('Failed to update user data');\n  }\n};","map":{"version":3,"names":["axios","toast","API_CONFIG","BASE_URL","process","env","REACT_APP_API_BASE_URL","TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","SESSION_TIMEOUT","REACT_APP_SESSION_TIMEOUT","WARNING_TIME","REACT_APP_WARNING_TIME","CHECK_INTERVAL","REACT_APP_CHECK_INTERVAL","STORAGE_KEYS","TOKEN","USER_ID","USER","REFRESH_TOKEN","LAST_ACTIVE","SESSION_ID","SESSION_START","SESSION_WARNING_SHOWN","REMEMBER_ME","REMEMBERED_EMAIL","LOGIN_IN_PROGRESS","getCurrentUTCDateTime","now","Date","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","getStoredUserData","userData","localStorage","getItem","JSON","parse","error","timestamp","console","message","currentUser","getCurrentUser","nickname","getSystemInfo","userAgent","navigator","platform","language","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","screenResolution","window","screen","width","height","clearStorage","preserveEmail","rememberedEmail","Object","keys","forEach","key","removeItem","sessionStorage","setItem","updateStoredUserData","storedUser","lastActive","lastUpdated","systemInfo","stringify","Error"],"sources":["C:/uiux development/frontend/confessapp/src/apis/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Configuration Constants\r\nconst API_CONFIG = {\r\n    BASE_URL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',\r\n    TIMEOUT: parseInt(process.env.REACT_APP_API_TIMEOUT) || 30000,\r\n    SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 60 * 1000,\r\n    WARNING_TIME: parseInt(process.env.REACT_APP_WARNING_TIME) || 45 * 1000,\r\n    CHECK_INTERVAL: parseInt(process.env.REACT_APP_CHECK_INTERVAL) || 10000\r\n};\r\n\r\n// Storage Keys\r\nconst STORAGE_KEYS = {\r\n    TOKEN: 'token',\r\n    USER_ID: 'userId',\r\n    USER: 'user',\r\n    REFRESH_TOKEN: 'refreshToken',\r\n    LAST_ACTIVE: 'lastActive',\r\n    SESSION_ID: 'sessionId',\r\n    SESSION_START: 'sessionStart',\r\n    SESSION_WARNING_SHOWN: 'sessionWarningShown',\r\n    REMEMBER_ME: 'rememberMe',\r\n    REMEMBERED_EMAIL: 'rememberedEmail',\r\n    LOGIN_IN_PROGRESS: 'loginInProgress'\r\n};\r\n\r\n// Utility Functions\r\nconst getCurrentUTCDateTime = () => {\r\n    const now = new Date();\r\n    const year = now.getUTCFullYear();\r\n    const month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n    const day = String(now.getUTCDate()).padStart(2, '0');\r\n    const hours = String(now.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n    const seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nconst getStoredUserData = () => {\r\n    try {\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER);\r\n        return userData ? JSON.parse(userData) : null;\r\n    } catch (error) {\r\n        const timestamp = getCurrentUTCDateTime();\r\n        console.error('Error getting user data:', {\r\n            error: error.message,\r\n            timestamp,\r\n            currentUser: null\r\n        });\r\n        return null;\r\n    }\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    const userData = getStoredUserData();\r\n    return userData?.nickname || 'raj2080';\r\n};\r\n\r\nconst getSystemInfo = () => {\r\n    const timestamp = getCurrentUTCDateTime();\r\n    const currentUser = getCurrentUser();\r\n\r\n    return {\r\n        userAgent: navigator.userAgent,\r\n        platform: navigator.platform,\r\n        language: navigator.language,\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n        timestamp,\r\n        currentUser\r\n    };\r\n};\r\n\r\nconst clearStorage = (preserveEmail = false) => {\r\n    const timestamp = getCurrentUTCDateTime();\r\n    const currentUser = getCurrentUser();\r\n\r\n    if (localStorage.getItem(STORAGE_KEYS.LOGIN_IN_PROGRESS)) {\r\n        return;\r\n    }\r\n\r\n    const rememberedEmail = preserveEmail ? localStorage.getItem(STORAGE_KEYS.REMEMBERED_EMAIL) : null;\r\n    \r\n    Object.keys(localStorage).forEach(key => {\r\n        if (key !== STORAGE_KEYS.REMEMBERED_EMAIL || !preserveEmail) {\r\n            try {\r\n                localStorage.removeItem(key);\r\n                sessionStorage.removeItem(key);\r\n            } catch (error) {\r\n                console.error('Storage clear error:', {\r\n                    key,\r\n                    error: error.message,\r\n                    timestamp,\r\n                    currentUser\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    if (preserveEmail && rememberedEmail) {\r\n        localStorage.setItem(STORAGE_KEYS.REMEMBERED_EMAIL, rememberedEmail);\r\n    }\r\n};\r\n\r\nconst updateStoredUserData = (userData) => {\r\n    if (!userData) return;\r\n    \r\n    const timestamp = getCurrentUTCDateTime();\r\n    const currentUser = getCurrentUser();\r\n\r\n    const storedUser = {\r\n        ...userData,\r\n        lastActive: timestamp,\r\n        lastUpdated: timestamp,\r\n        systemInfo: getSystemInfo()\r\n    };\r\n\r\n    try {\r\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(storedUser));\r\n        localStorage.setItem(STORAGE_KEYS.LAST_ACTIVE, timestamp);\r\n    } catch (error) {\r\n        console.error('User data update error:', {\r\n            error: error.message,\r\n            timestamp,\r\n            currentUser\r\n        });\r\n        throw new Error('Failed to update user data');\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}